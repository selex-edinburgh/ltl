/*
 * generated by Xtext 2.31.0
 */
package com.leonardo.ltl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LTLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.ltl.LTL.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPackagesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackagesPackageParserRuleCall_1_0 = (RuleCall)cPackagesAssignment_1.eContents().get(0);
		
		//Model:
		//    {Model} packages+=(Package)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Model} packages+=(Package)*
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//packages+=(Package)*
		public Assignment getPackagesAssignment_1() { return cPackagesAssignment_1; }
		
		//(Package)
		public RuleCall getPackagesPackageParserRuleCall_1_0() { return cPackagesPackageParserRuleCall_1_0; }
	}
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.ltl.LTL.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cDescriptionKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cDescriptionAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0_1_0 = (RuleCall)cDescriptionAssignment_2_0_1.eContents().get(0);
		private final Assignment cPackagableElementsAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cPackagableElementsPackagableElementParserRuleCall_2_1_0 = (RuleCall)cPackagableElementsAssignment_2_1.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Package:
		//    'package' name=QualifiedName
		//    (
		//        ('description' description=STRING)? &
		//        ((packagableElements+=PackagableElement)*)
		//    )
		//    'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=QualifiedName
		//(
		//    ('description' description=STRING)? &
		//    ((packagableElements+=PackagableElement)*)
		//)
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//(
		//    ('description' description=STRING)? &
		//    ((packagableElements+=PackagableElement)*)
		//)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//('description' description=STRING)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'description'
		public Keyword getDescriptionKeyword_2_0_0() { return cDescriptionKeyword_2_0_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_2_0_1() { return cDescriptionAssignment_2_0_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0_1_0() { return cDescriptionSTRINGTerminalRuleCall_2_0_1_0; }
		
		//((packagableElements+=PackagableElement)*)
		public Assignment getPackagableElementsAssignment_2_1() { return cPackagableElementsAssignment_2_1; }
		
		//PackagableElement
		public RuleCall getPackagableElementsPackagableElementParserRuleCall_2_1_0() { return cPackagableElementsPackagableElementParserRuleCall_2_1_0; }
		
		//'end'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}
	public class PackagableElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.ltl.LTL.PackagableElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTestExecutionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTestableEntityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTestRequirementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTestSpecificationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PackagableElement returns PackagableElement:
		//    TestExecution | TestableEntity | TestRequirement | TestSpecification;
		@Override public ParserRule getRule() { return rule; }
		
		//TestExecution | TestableEntity | TestRequirement | TestSpecification
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TestExecution
		public RuleCall getTestExecutionParserRuleCall_0() { return cTestExecutionParserRuleCall_0; }
		
		//TestableEntity
		public RuleCall getTestableEntityParserRuleCall_1() { return cTestableEntityParserRuleCall_1; }
		
		//TestRequirement
		public RuleCall getTestRequirementParserRuleCall_2() { return cTestRequirementParserRuleCall_2; }
		
		//TestSpecification
		public RuleCall getTestSpecificationParserRuleCall_3() { return cTestSpecificationParserRuleCall_3; }
	}
	public class TestSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.ltl.LTL.TestSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTestSuiteParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTestCaseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TestSpecification returns TestSpecification:
		//    TestSuite | TestCase;
		@Override public ParserRule getRule() { return rule; }
		
		//TestSuite | TestCase
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TestSuite
		public RuleCall getTestSuiteParserRuleCall_0() { return cTestSuiteParserRuleCall_0; }
		
		//TestCase
		public RuleCall getTestCaseParserRuleCall_1() { return cTestCaseParserRuleCall_1; }
	}
	public class TestableEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.ltl.LTL.TestableEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTestableEntityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cDescriptionKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0_1_0 = (RuleCall)cDescriptionAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cVersionKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cVersionAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cVersionSTRINGTerminalRuleCall_3_1_1_0 = (RuleCall)cVersionAssignment_3_1_1.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TestableEntity:
		//    {TestableEntity}
		//    'entity' name=QualifiedName
		//    (
		//        ('description' description=STRING)? &
		//        ('version' version=STRING)?
		//    )
		//    'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{TestableEntity}
		//'entity' name=QualifiedName
		//(
		//    ('description' description=STRING)? &
		//    ('version' version=STRING)?
		//)
		//'end'
		public Group getGroup() { return cGroup; }
		
		//{TestableEntity}
		public Action getTestableEntityAction_0() { return cTestableEntityAction_0; }
		
		//'entity'
		public Keyword getEntityKeyword_1() { return cEntityKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//(
		//    ('description' description=STRING)? &
		//    ('version' version=STRING)?
		//)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//('description' description=STRING)?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'description'
		public Keyword getDescriptionKeyword_3_0_0() { return cDescriptionKeyword_3_0_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_3_0_1() { return cDescriptionAssignment_3_0_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0_1_0() { return cDescriptionSTRINGTerminalRuleCall_3_0_1_0; }
		
		//('version' version=STRING)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'version'
		public Keyword getVersionKeyword_3_1_0() { return cVersionKeyword_3_1_0; }
		
		//version=STRING
		public Assignment getVersionAssignment_3_1_1() { return cVersionAssignment_3_1_1; }
		
		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_3_1_1_0() { return cVersionSTRINGTerminalRuleCall_3_1_1_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class TestRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.ltl.LTL.TestRequirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTestRequirementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRequirementKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cDescriptionKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0_1_0 = (RuleCall)cDescriptionAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cVersionKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cVersionAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cVersionSTRINGTerminalRuleCall_3_1_1_0 = (RuleCall)cVersionAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cEntityKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cTestableEntityAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cTestableEntityTestableEntityCrossReference_3_2_1_0 = (CrossReference)cTestableEntityAssignment_3_2_1.eContents().get(0);
		private final RuleCall cTestableEntityTestableEntityQualifiedNameParserRuleCall_3_2_1_0_1 = (RuleCall)cTestableEntityTestableEntityCrossReference_3_2_1_0.eContents().get(1);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TestRequirement:
		//    {TestRequirement}
		//    'requirement' name=QualifiedName
		//    (
		//        ('description' description=STRING)? &
		//        ('version' version=STRING)? &
		//        ('entity' testableEntity=[TestableEntity|QualifiedName])?
		//    )
		//    'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{TestRequirement}
		//'requirement' name=QualifiedName
		//(
		//    ('description' description=STRING)? &
		//    ('version' version=STRING)? &
		//    ('entity' testableEntity=[TestableEntity|QualifiedName])?
		//)
		//'end'
		public Group getGroup() { return cGroup; }
		
		//{TestRequirement}
		public Action getTestRequirementAction_0() { return cTestRequirementAction_0; }
		
		//'requirement'
		public Keyword getRequirementKeyword_1() { return cRequirementKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//(
		//    ('description' description=STRING)? &
		//    ('version' version=STRING)? &
		//    ('entity' testableEntity=[TestableEntity|QualifiedName])?
		//)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//('description' description=STRING)?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'description'
		public Keyword getDescriptionKeyword_3_0_0() { return cDescriptionKeyword_3_0_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_3_0_1() { return cDescriptionAssignment_3_0_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0_1_0() { return cDescriptionSTRINGTerminalRuleCall_3_0_1_0; }
		
		//('version' version=STRING)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'version'
		public Keyword getVersionKeyword_3_1_0() { return cVersionKeyword_3_1_0; }
		
		//version=STRING
		public Assignment getVersionAssignment_3_1_1() { return cVersionAssignment_3_1_1; }
		
		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_3_1_1_0() { return cVersionSTRINGTerminalRuleCall_3_1_1_0; }
		
		//('entity' testableEntity=[TestableEntity|QualifiedName])?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'entity'
		public Keyword getEntityKeyword_3_2_0() { return cEntityKeyword_3_2_0; }
		
		//testableEntity=[TestableEntity|QualifiedName]
		public Assignment getTestableEntityAssignment_3_2_1() { return cTestableEntityAssignment_3_2_1; }
		
		//[TestableEntity|QualifiedName]
		public CrossReference getTestableEntityTestableEntityCrossReference_3_2_1_0() { return cTestableEntityTestableEntityCrossReference_3_2_1_0; }
		
		//QualifiedName
		public RuleCall getTestableEntityTestableEntityQualifiedNameParserRuleCall_3_2_1_0_1() { return cTestableEntityTestableEntityQualifiedNameParserRuleCall_3_2_1_0_1; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class TestSuiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.ltl.LTL.TestSuite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTestSuiteAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSuiteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cDescriptionKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0_1_0 = (RuleCall)cDescriptionAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cDateKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cDateAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cDateSTRINGTerminalRuleCall_3_1_1_0 = (RuleCall)cDateAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cVersionKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cVersionAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cVersionSTRINGTerminalRuleCall_3_2_1_0 = (RuleCall)cVersionAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cCasesKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cTestSpecificationsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cTestSpecificationsTestSpecificationCrossReference_3_3_1_0 = (CrossReference)cTestSpecificationsAssignment_3_3_1.eContents().get(0);
		private final RuleCall cTestSpecificationsTestSpecificationQualifiedNameParserRuleCall_3_3_1_0_1 = (RuleCall)cTestSpecificationsTestSpecificationCrossReference_3_3_1_0.eContents().get(1);
		private final Keyword cEndKeyword_3_3_2 = (Keyword)cGroup_3_3.eContents().get(2);
		private final Group cGroup_3_4 = (Group)cUnorderedGroup_3.eContents().get(4);
		private final Keyword cEntitiesKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cTestableEntitiesAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final CrossReference cTestableEntitiesTestableEntityCrossReference_3_4_1_0 = (CrossReference)cTestableEntitiesAssignment_3_4_1.eContents().get(0);
		private final RuleCall cTestableEntitiesTestableEntityQualifiedNameParserRuleCall_3_4_1_0_1 = (RuleCall)cTestableEntitiesTestableEntityCrossReference_3_4_1_0.eContents().get(1);
		private final Keyword cEndKeyword_3_4_2 = (Keyword)cGroup_3_4.eContents().get(2);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TestSuite:
		//    {TestSuite}
		//    'suite' name=QualifiedName
		//    (
		//        ('description' description=STRING)? &
		//        ('date' date=STRING)? &
		//        ('version' version=STRING)? &
		//        ('cases'
		//        (testSpecifications+=[TestSpecification|QualifiedName])*
		//        'end') &
		//        ('entities'
		//            (testableEntities+=[TestableEntity|QualifiedName])*
		//        'end')
		//    )
		//    'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{TestSuite}
		//'suite' name=QualifiedName
		//(
		//    ('description' description=STRING)? &
		//    ('date' date=STRING)? &
		//    ('version' version=STRING)? &
		//    ('cases'
		//    (testSpecifications+=[TestSpecification|QualifiedName])*
		//    'end') &
		//    ('entities'
		//        (testableEntities+=[TestableEntity|QualifiedName])*
		//    'end')
		//)
		//'end'
		public Group getGroup() { return cGroup; }
		
		//{TestSuite}
		public Action getTestSuiteAction_0() { return cTestSuiteAction_0; }
		
		//'suite'
		public Keyword getSuiteKeyword_1() { return cSuiteKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//(
		//    ('description' description=STRING)? &
		//    ('date' date=STRING)? &
		//    ('version' version=STRING)? &
		//    ('cases'
		//    (testSpecifications+=[TestSpecification|QualifiedName])*
		//    'end') &
		//    ('entities'
		//        (testableEntities+=[TestableEntity|QualifiedName])*
		//    'end')
		//)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//('description' description=STRING)?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'description'
		public Keyword getDescriptionKeyword_3_0_0() { return cDescriptionKeyword_3_0_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_3_0_1() { return cDescriptionAssignment_3_0_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0_1_0() { return cDescriptionSTRINGTerminalRuleCall_3_0_1_0; }
		
		//('date' date=STRING)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'date'
		public Keyword getDateKeyword_3_1_0() { return cDateKeyword_3_1_0; }
		
		//date=STRING
		public Assignment getDateAssignment_3_1_1() { return cDateAssignment_3_1_1; }
		
		//STRING
		public RuleCall getDateSTRINGTerminalRuleCall_3_1_1_0() { return cDateSTRINGTerminalRuleCall_3_1_1_0; }
		
		//('version' version=STRING)?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'version'
		public Keyword getVersionKeyword_3_2_0() { return cVersionKeyword_3_2_0; }
		
		//version=STRING
		public Assignment getVersionAssignment_3_2_1() { return cVersionAssignment_3_2_1; }
		
		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_3_2_1_0() { return cVersionSTRINGTerminalRuleCall_3_2_1_0; }
		
		//('cases'
		//(testSpecifications+=[TestSpecification|QualifiedName])*
		//'end')
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'cases'
		public Keyword getCasesKeyword_3_3_0() { return cCasesKeyword_3_3_0; }
		
		//(testSpecifications+=[TestSpecification|QualifiedName])*
		public Assignment getTestSpecificationsAssignment_3_3_1() { return cTestSpecificationsAssignment_3_3_1; }
		
		//[TestSpecification|QualifiedName]
		public CrossReference getTestSpecificationsTestSpecificationCrossReference_3_3_1_0() { return cTestSpecificationsTestSpecificationCrossReference_3_3_1_0; }
		
		//QualifiedName
		public RuleCall getTestSpecificationsTestSpecificationQualifiedNameParserRuleCall_3_3_1_0_1() { return cTestSpecificationsTestSpecificationQualifiedNameParserRuleCall_3_3_1_0_1; }
		
		//'end'
		public Keyword getEndKeyword_3_3_2() { return cEndKeyword_3_3_2; }
		
		//('entities'
		//    (testableEntities+=[TestableEntity|QualifiedName])*
		//'end')
		public Group getGroup_3_4() { return cGroup_3_4; }
		
		//'entities'
		public Keyword getEntitiesKeyword_3_4_0() { return cEntitiesKeyword_3_4_0; }
		
		//(testableEntities+=[TestableEntity|QualifiedName])*
		public Assignment getTestableEntitiesAssignment_3_4_1() { return cTestableEntitiesAssignment_3_4_1; }
		
		//[TestableEntity|QualifiedName]
		public CrossReference getTestableEntitiesTestableEntityCrossReference_3_4_1_0() { return cTestableEntitiesTestableEntityCrossReference_3_4_1_0; }
		
		//QualifiedName
		public RuleCall getTestableEntitiesTestableEntityQualifiedNameParserRuleCall_3_4_1_0_1() { return cTestableEntitiesTestableEntityQualifiedNameParserRuleCall_3_4_1_0_1; }
		
		//'end'
		public Keyword getEndKeyword_3_4_2() { return cEndKeyword_3_4_2; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class TestCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.ltl.LTL.TestCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTestCaseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cDescriptionKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0_1_0 = (RuleCall)cDescriptionAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cDateKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cDateAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cDateSTRINGTerminalRuleCall_3_1_1_0 = (RuleCall)cDateAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cVersionKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cVersionAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cVersionSTRINGTerminalRuleCall_3_2_1_0 = (RuleCall)cVersionAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cPreconditionKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cPreconditionAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cPreconditionSTRINGTerminalRuleCall_3_3_1_0 = (RuleCall)cPreconditionAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cUnorderedGroup_3.eContents().get(4);
		private final Keyword cMethodKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cTestingMethodAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cTestingMethodSTRINGTerminalRuleCall_3_4_1_0 = (RuleCall)cTestingMethodAssignment_3_4_1.eContents().get(0);
		private final Group cGroup_3_5 = (Group)cUnorderedGroup_3.eContents().get(5);
		private final Keyword cExpectedResultKeyword_3_5_0 = (Keyword)cGroup_3_5.eContents().get(0);
		private final Assignment cExpectedResultAssignment_3_5_1 = (Assignment)cGroup_3_5.eContents().get(1);
		private final RuleCall cExpectedResultSTRINGTerminalRuleCall_3_5_1_0 = (RuleCall)cExpectedResultAssignment_3_5_1.eContents().get(0);
		private final Group cGroup_3_6 = (Group)cUnorderedGroup_3.eContents().get(6);
		private final Keyword cActualResultKeyword_3_6_0 = (Keyword)cGroup_3_6.eContents().get(0);
		private final Assignment cActualResultAssignment_3_6_1 = (Assignment)cGroup_3_6.eContents().get(1);
		private final RuleCall cActualResultSTRINGTerminalRuleCall_3_6_1_0 = (RuleCall)cActualResultAssignment_3_6_1.eContents().get(0);
		private final Group cGroup_3_7 = (Group)cUnorderedGroup_3.eContents().get(7);
		private final Keyword cPassedKeyword_3_7_0 = (Keyword)cGroup_3_7.eContents().get(0);
		private final Assignment cPassedAssignment_3_7_1 = (Assignment)cGroup_3_7.eContents().get(1);
		private final RuleCall cPassedBooleanParserRuleCall_3_7_1_0 = (RuleCall)cPassedAssignment_3_7_1.eContents().get(0);
		private final Group cGroup_3_8 = (Group)cUnorderedGroup_3.eContents().get(8);
		private final Keyword cIncidentKeyword_3_8_0 = (Keyword)cGroup_3_8.eContents().get(0);
		private final Assignment cIncidentAssignment_3_8_1 = (Assignment)cGroup_3_8.eContents().get(1);
		private final RuleCall cIncidentSTRINGTerminalRuleCall_3_8_1_0 = (RuleCall)cIncidentAssignment_3_8_1.eContents().get(0);
		private final Group cGroup_3_9 = (Group)cUnorderedGroup_3.eContents().get(9);
		private final Keyword cPostconditionKeyword_3_9_0 = (Keyword)cGroup_3_9.eContents().get(0);
		private final Assignment cPostconditionAssignment_3_9_1 = (Assignment)cGroup_3_9.eContents().get(1);
		private final RuleCall cPostconditionSTRINGTerminalRuleCall_3_9_1_0 = (RuleCall)cPostconditionAssignment_3_9_1.eContents().get(0);
		private final Group cGroup_3_10 = (Group)cUnorderedGroup_3.eContents().get(10);
		private final Keyword cInputsKeyword_3_10_0 = (Keyword)cGroup_3_10.eContents().get(0);
		private final Assignment cInputsAssignment_3_10_1 = (Assignment)cGroup_3_10.eContents().get(1);
		private final RuleCall cInputsSTRINGTerminalRuleCall_3_10_1_0 = (RuleCall)cInputsAssignment_3_10_1.eContents().get(0);
		private final Group cGroup_3_10_2 = (Group)cGroup_3_10.eContents().get(2);
		private final Keyword cCommaKeyword_3_10_2_0 = (Keyword)cGroup_3_10_2.eContents().get(0);
		private final Assignment cInputsAssignment_3_10_2_1 = (Assignment)cGroup_3_10_2.eContents().get(1);
		private final RuleCall cInputsSTRINGTerminalRuleCall_3_10_2_1_0 = (RuleCall)cInputsAssignment_3_10_2_1.eContents().get(0);
		private final Group cGroup_3_11 = (Group)cUnorderedGroup_3.eContents().get(11);
		private final Keyword cEntitiesKeyword_3_11_0 = (Keyword)cGroup_3_11.eContents().get(0);
		private final Assignment cTestableEntitiesAssignment_3_11_1 = (Assignment)cGroup_3_11.eContents().get(1);
		private final CrossReference cTestableEntitiesTestableEntityCrossReference_3_11_1_0 = (CrossReference)cTestableEntitiesAssignment_3_11_1.eContents().get(0);
		private final RuleCall cTestableEntitiesTestableEntityQualifiedNameParserRuleCall_3_11_1_0_1 = (RuleCall)cTestableEntitiesTestableEntityCrossReference_3_11_1_0.eContents().get(1);
		private final Keyword cEndKeyword_3_11_2 = (Keyword)cGroup_3_11.eContents().get(2);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TestCase:
		//    {TestCase}
		//    'case' name=QualifiedName
		//    (
		//        ('description' description=STRING)? &
		//        ('date' date=STRING)? &
		//        ('version' version=STRING)? &
		//        ('precondition' precondition=STRING)? &
		//        ('method' testingMethod=STRING)? &
		//        ('expectedResult' expectedResult=STRING)? &
		//        ('actualResult' actualResult=STRING)? &
		//        ('passed' passed=Boolean)? &
		//        ('incident' incident=STRING)? &
		//        ('postcondition' postcondition=STRING)? &
		//        ('inputs' inputs+=STRING ("," inputs+=STRING)*)? &
		//        ('entities'
		//            (testableEntities+=[TestableEntity|QualifiedName])*
		//        'end')
		//    )
		//    'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{TestCase}
		//'case' name=QualifiedName
		//(
		//    ('description' description=STRING)? &
		//    ('date' date=STRING)? &
		//    ('version' version=STRING)? &
		//    ('precondition' precondition=STRING)? &
		//    ('method' testingMethod=STRING)? &
		//    ('expectedResult' expectedResult=STRING)? &
		//    ('actualResult' actualResult=STRING)? &
		//    ('passed' passed=Boolean)? &
		//    ('incident' incident=STRING)? &
		//    ('postcondition' postcondition=STRING)? &
		//    ('inputs' inputs+=STRING ("," inputs+=STRING)*)? &
		//    ('entities'
		//        (testableEntities+=[TestableEntity|QualifiedName])*
		//    'end')
		//)
		//'end'
		public Group getGroup() { return cGroup; }
		
		//{TestCase}
		public Action getTestCaseAction_0() { return cTestCaseAction_0; }
		
		//'case'
		public Keyword getCaseKeyword_1() { return cCaseKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//(
		//    ('description' description=STRING)? &
		//    ('date' date=STRING)? &
		//    ('version' version=STRING)? &
		//    ('precondition' precondition=STRING)? &
		//    ('method' testingMethod=STRING)? &
		//    ('expectedResult' expectedResult=STRING)? &
		//    ('actualResult' actualResult=STRING)? &
		//    ('passed' passed=Boolean)? &
		//    ('incident' incident=STRING)? &
		//    ('postcondition' postcondition=STRING)? &
		//    ('inputs' inputs+=STRING ("," inputs+=STRING)*)? &
		//    ('entities'
		//        (testableEntities+=[TestableEntity|QualifiedName])*
		//    'end')
		//)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//('description' description=STRING)?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'description'
		public Keyword getDescriptionKeyword_3_0_0() { return cDescriptionKeyword_3_0_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_3_0_1() { return cDescriptionAssignment_3_0_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0_1_0() { return cDescriptionSTRINGTerminalRuleCall_3_0_1_0; }
		
		//('date' date=STRING)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'date'
		public Keyword getDateKeyword_3_1_0() { return cDateKeyword_3_1_0; }
		
		//date=STRING
		public Assignment getDateAssignment_3_1_1() { return cDateAssignment_3_1_1; }
		
		//STRING
		public RuleCall getDateSTRINGTerminalRuleCall_3_1_1_0() { return cDateSTRINGTerminalRuleCall_3_1_1_0; }
		
		//('version' version=STRING)?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'version'
		public Keyword getVersionKeyword_3_2_0() { return cVersionKeyword_3_2_0; }
		
		//version=STRING
		public Assignment getVersionAssignment_3_2_1() { return cVersionAssignment_3_2_1; }
		
		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_3_2_1_0() { return cVersionSTRINGTerminalRuleCall_3_2_1_0; }
		
		//('precondition' precondition=STRING)?
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'precondition'
		public Keyword getPreconditionKeyword_3_3_0() { return cPreconditionKeyword_3_3_0; }
		
		//precondition=STRING
		public Assignment getPreconditionAssignment_3_3_1() { return cPreconditionAssignment_3_3_1; }
		
		//STRING
		public RuleCall getPreconditionSTRINGTerminalRuleCall_3_3_1_0() { return cPreconditionSTRINGTerminalRuleCall_3_3_1_0; }
		
		//('method' testingMethod=STRING)?
		public Group getGroup_3_4() { return cGroup_3_4; }
		
		//'method'
		public Keyword getMethodKeyword_3_4_0() { return cMethodKeyword_3_4_0; }
		
		//testingMethod=STRING
		public Assignment getTestingMethodAssignment_3_4_1() { return cTestingMethodAssignment_3_4_1; }
		
		//STRING
		public RuleCall getTestingMethodSTRINGTerminalRuleCall_3_4_1_0() { return cTestingMethodSTRINGTerminalRuleCall_3_4_1_0; }
		
		//('expectedResult' expectedResult=STRING)?
		public Group getGroup_3_5() { return cGroup_3_5; }
		
		//'expectedResult'
		public Keyword getExpectedResultKeyword_3_5_0() { return cExpectedResultKeyword_3_5_0; }
		
		//expectedResult=STRING
		public Assignment getExpectedResultAssignment_3_5_1() { return cExpectedResultAssignment_3_5_1; }
		
		//STRING
		public RuleCall getExpectedResultSTRINGTerminalRuleCall_3_5_1_0() { return cExpectedResultSTRINGTerminalRuleCall_3_5_1_0; }
		
		//('actualResult' actualResult=STRING)?
		public Group getGroup_3_6() { return cGroup_3_6; }
		
		//'actualResult'
		public Keyword getActualResultKeyword_3_6_0() { return cActualResultKeyword_3_6_0; }
		
		//actualResult=STRING
		public Assignment getActualResultAssignment_3_6_1() { return cActualResultAssignment_3_6_1; }
		
		//STRING
		public RuleCall getActualResultSTRINGTerminalRuleCall_3_6_1_0() { return cActualResultSTRINGTerminalRuleCall_3_6_1_0; }
		
		//('passed' passed=Boolean)?
		public Group getGroup_3_7() { return cGroup_3_7; }
		
		//'passed'
		public Keyword getPassedKeyword_3_7_0() { return cPassedKeyword_3_7_0; }
		
		//passed=Boolean
		public Assignment getPassedAssignment_3_7_1() { return cPassedAssignment_3_7_1; }
		
		//Boolean
		public RuleCall getPassedBooleanParserRuleCall_3_7_1_0() { return cPassedBooleanParserRuleCall_3_7_1_0; }
		
		//('incident' incident=STRING)?
		public Group getGroup_3_8() { return cGroup_3_8; }
		
		//'incident'
		public Keyword getIncidentKeyword_3_8_0() { return cIncidentKeyword_3_8_0; }
		
		//incident=STRING
		public Assignment getIncidentAssignment_3_8_1() { return cIncidentAssignment_3_8_1; }
		
		//STRING
		public RuleCall getIncidentSTRINGTerminalRuleCall_3_8_1_0() { return cIncidentSTRINGTerminalRuleCall_3_8_1_0; }
		
		//('postcondition' postcondition=STRING)?
		public Group getGroup_3_9() { return cGroup_3_9; }
		
		//'postcondition'
		public Keyword getPostconditionKeyword_3_9_0() { return cPostconditionKeyword_3_9_0; }
		
		//postcondition=STRING
		public Assignment getPostconditionAssignment_3_9_1() { return cPostconditionAssignment_3_9_1; }
		
		//STRING
		public RuleCall getPostconditionSTRINGTerminalRuleCall_3_9_1_0() { return cPostconditionSTRINGTerminalRuleCall_3_9_1_0; }
		
		//('inputs' inputs+=STRING ("," inputs+=STRING)*)?
		public Group getGroup_3_10() { return cGroup_3_10; }
		
		//'inputs'
		public Keyword getInputsKeyword_3_10_0() { return cInputsKeyword_3_10_0; }
		
		//inputs+=STRING
		public Assignment getInputsAssignment_3_10_1() { return cInputsAssignment_3_10_1; }
		
		//STRING
		public RuleCall getInputsSTRINGTerminalRuleCall_3_10_1_0() { return cInputsSTRINGTerminalRuleCall_3_10_1_0; }
		
		//("," inputs+=STRING)*
		public Group getGroup_3_10_2() { return cGroup_3_10_2; }
		
		//","
		public Keyword getCommaKeyword_3_10_2_0() { return cCommaKeyword_3_10_2_0; }
		
		//inputs+=STRING
		public Assignment getInputsAssignment_3_10_2_1() { return cInputsAssignment_3_10_2_1; }
		
		//STRING
		public RuleCall getInputsSTRINGTerminalRuleCall_3_10_2_1_0() { return cInputsSTRINGTerminalRuleCall_3_10_2_1_0; }
		
		//('entities'
		//    (testableEntities+=[TestableEntity|QualifiedName])*
		//'end')
		public Group getGroup_3_11() { return cGroup_3_11; }
		
		//'entities'
		public Keyword getEntitiesKeyword_3_11_0() { return cEntitiesKeyword_3_11_0; }
		
		//(testableEntities+=[TestableEntity|QualifiedName])*
		public Assignment getTestableEntitiesAssignment_3_11_1() { return cTestableEntitiesAssignment_3_11_1; }
		
		//[TestableEntity|QualifiedName]
		public CrossReference getTestableEntitiesTestableEntityCrossReference_3_11_1_0() { return cTestableEntitiesTestableEntityCrossReference_3_11_1_0; }
		
		//QualifiedName
		public RuleCall getTestableEntitiesTestableEntityQualifiedNameParserRuleCall_3_11_1_0_1() { return cTestableEntitiesTestableEntityQualifiedNameParserRuleCall_3_11_1_0_1; }
		
		//'end'
		public Keyword getEndKeyword_3_11_2() { return cEndKeyword_3_11_2; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class TestExecutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.ltl.LTL.TestExecution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cDescriptionKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cDescriptionAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0_1_0 = (RuleCall)cDescriptionAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cDateKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cDateAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cDateSTRINGTerminalRuleCall_2_1_1_0 = (RuleCall)cDateAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cSpecificationKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cTestSpecificationsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cTestSpecificationsTestSpecificationCrossReference_2_2_1_0 = (CrossReference)cTestSpecificationsAssignment_2_2_1.eContents().get(0);
		private final RuleCall cTestSpecificationsTestSpecificationQualifiedNameParserRuleCall_2_2_1_0_1 = (RuleCall)cTestSpecificationsTestSpecificationCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cEndKeyword_2_2_2 = (Keyword)cGroup_2_2.eContents().get(2);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TestExecution:
		//    'test' name=QualifiedName (
		//        ('description' description=STRING)? &
		//        ('date' date=STRING)? &
		//        ('specification' (testSpecifications+=[TestSpecification|QualifiedName])* 'end')
		//    )
		//    'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'test' name=QualifiedName (
		//    ('description' description=STRING)? &
		//    ('date' date=STRING)? &
		//    ('specification' (testSpecifications+=[TestSpecification|QualifiedName])* 'end')
		//)
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'test'
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//(
		//       ('description' description=STRING)? &
		//       ('date' date=STRING)? &
		//       ('specification' (testSpecifications+=[TestSpecification|QualifiedName])* 'end')
		//   )
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//('description' description=STRING)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'description'
		public Keyword getDescriptionKeyword_2_0_0() { return cDescriptionKeyword_2_0_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_2_0_1() { return cDescriptionAssignment_2_0_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0_1_0() { return cDescriptionSTRINGTerminalRuleCall_2_0_1_0; }
		
		//('date' date=STRING)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'date'
		public Keyword getDateKeyword_2_1_0() { return cDateKeyword_2_1_0; }
		
		//date=STRING
		public Assignment getDateAssignment_2_1_1() { return cDateAssignment_2_1_1; }
		
		//STRING
		public RuleCall getDateSTRINGTerminalRuleCall_2_1_1_0() { return cDateSTRINGTerminalRuleCall_2_1_1_0; }
		
		//('specification' (testSpecifications+=[TestSpecification|QualifiedName])* 'end')
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'specification'
		public Keyword getSpecificationKeyword_2_2_0() { return cSpecificationKeyword_2_2_0; }
		
		//(testSpecifications+=[TestSpecification|QualifiedName])*
		public Assignment getTestSpecificationsAssignment_2_2_1() { return cTestSpecificationsAssignment_2_2_1; }
		
		//[TestSpecification|QualifiedName]
		public CrossReference getTestSpecificationsTestSpecificationCrossReference_2_2_1_0() { return cTestSpecificationsTestSpecificationCrossReference_2_2_1_0; }
		
		//QualifiedName
		public RuleCall getTestSpecificationsTestSpecificationQualifiedNameParserRuleCall_2_2_1_0_1() { return cTestSpecificationsTestSpecificationQualifiedNameParserRuleCall_2_2_1_0_1; }
		
		//'end'
		public Keyword getEndKeyword_2_2_2() { return cEndKeyword_2_2_2; }
		
		//'end'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.ltl.LTL.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName hidden():
		//    ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.leonardo.ltl.LTL.Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Boolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	
	private final ModelElements pModel;
	private final PackageElements pPackage;
	private final PackagableElementElements pPackagableElement;
	private final TestSpecificationElements pTestSpecification;
	private final TestableEntityElements pTestableEntity;
	private final TestRequirementElements pTestRequirement;
	private final TestSuiteElements pTestSuite;
	private final TestCaseElements pTestCase;
	private final TestExecutionElements pTestExecution;
	private final QualifiedNameElements pQualifiedName;
	private final BooleanElements pBoolean;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LTLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPackage = new PackageElements();
		this.pPackagableElement = new PackagableElementElements();
		this.pTestSpecification = new TestSpecificationElements();
		this.pTestableEntity = new TestableEntityElements();
		this.pTestRequirement = new TestRequirementElements();
		this.pTestSuite = new TestSuiteElements();
		this.pTestCase = new TestCaseElements();
		this.pTestExecution = new TestExecutionElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pBoolean = new BooleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.leonardo.ltl.LTL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    {Model} packages+=(Package)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Package:
	//    'package' name=QualifiedName
	//    (
	//        ('description' description=STRING)? &
	//        ((packagableElements+=PackagableElement)*)
	//    )
	//    'end';
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//PackagableElement returns PackagableElement:
	//    TestExecution | TestableEntity | TestRequirement | TestSpecification;
	public PackagableElementElements getPackagableElementAccess() {
		return pPackagableElement;
	}
	
	public ParserRule getPackagableElementRule() {
		return getPackagableElementAccess().getRule();
	}
	
	//TestSpecification returns TestSpecification:
	//    TestSuite | TestCase;
	public TestSpecificationElements getTestSpecificationAccess() {
		return pTestSpecification;
	}
	
	public ParserRule getTestSpecificationRule() {
		return getTestSpecificationAccess().getRule();
	}
	
	//TestableEntity:
	//    {TestableEntity}
	//    'entity' name=QualifiedName
	//    (
	//        ('description' description=STRING)? &
	//        ('version' version=STRING)?
	//    )
	//    'end';
	public TestableEntityElements getTestableEntityAccess() {
		return pTestableEntity;
	}
	
	public ParserRule getTestableEntityRule() {
		return getTestableEntityAccess().getRule();
	}
	
	//TestRequirement:
	//    {TestRequirement}
	//    'requirement' name=QualifiedName
	//    (
	//        ('description' description=STRING)? &
	//        ('version' version=STRING)? &
	//        ('entity' testableEntity=[TestableEntity|QualifiedName])?
	//    )
	//    'end';
	public TestRequirementElements getTestRequirementAccess() {
		return pTestRequirement;
	}
	
	public ParserRule getTestRequirementRule() {
		return getTestRequirementAccess().getRule();
	}
	
	//TestSuite:
	//    {TestSuite}
	//    'suite' name=QualifiedName
	//    (
	//        ('description' description=STRING)? &
	//        ('date' date=STRING)? &
	//        ('version' version=STRING)? &
	//        ('cases'
	//        (testSpecifications+=[TestSpecification|QualifiedName])*
	//        'end') &
	//        ('entities'
	//            (testableEntities+=[TestableEntity|QualifiedName])*
	//        'end')
	//    )
	//    'end';
	public TestSuiteElements getTestSuiteAccess() {
		return pTestSuite;
	}
	
	public ParserRule getTestSuiteRule() {
		return getTestSuiteAccess().getRule();
	}
	
	//TestCase:
	//    {TestCase}
	//    'case' name=QualifiedName
	//    (
	//        ('description' description=STRING)? &
	//        ('date' date=STRING)? &
	//        ('version' version=STRING)? &
	//        ('precondition' precondition=STRING)? &
	//        ('method' testingMethod=STRING)? &
	//        ('expectedResult' expectedResult=STRING)? &
	//        ('actualResult' actualResult=STRING)? &
	//        ('passed' passed=Boolean)? &
	//        ('incident' incident=STRING)? &
	//        ('postcondition' postcondition=STRING)? &
	//        ('inputs' inputs+=STRING ("," inputs+=STRING)*)? &
	//        ('entities'
	//            (testableEntities+=[TestableEntity|QualifiedName])*
	//        'end')
	//    )
	//    'end';
	public TestCaseElements getTestCaseAccess() {
		return pTestCase;
	}
	
	public ParserRule getTestCaseRule() {
		return getTestCaseAccess().getRule();
	}
	
	//TestExecution:
	//    'test' name=QualifiedName (
	//        ('description' description=STRING)? &
	//        ('date' date=STRING)? &
	//        ('specification' (testSpecifications+=[TestSpecification|QualifiedName])* 'end')
	//    )
	//    'end';
	public TestExecutionElements getTestExecutionAccess() {
		return pTestExecution;
	}
	
	public ParserRule getTestExecutionRule() {
		return getTestExecutionAccess().getRule();
	}
	
	//QualifiedName hidden():
	//    ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Boolean returns ecore::EBoolean:
	//    'true' | 'false';
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
