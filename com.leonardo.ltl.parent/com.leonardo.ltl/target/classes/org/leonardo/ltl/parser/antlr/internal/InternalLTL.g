/*
 * generated by Xtext 2.31.0
 */
grammar InternalLTL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.leonardo.ltl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.leonardo.ltl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.leonardo.ltl.services.LTLGrammarAccess;

}

@parser::members {

 	private LTLGrammarAccess grammarAccess;

    public InternalLTLParser(TokenStream input, LTLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected LTLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getModelAccess().getModelAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getPackagePackageParserRuleCall_1_0());
				}
				lv_package_1_0=rulePackage
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"package",
						lv_package_1_0,
						"org.leonardo.ltl.LTL.Package");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRulePackage
entryRulePackage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackageRule()); }
	iv_rulePackage=rulePackage
	{ $current=$iv_rulePackage.current; }
	EOF;

// Rule Package
rulePackage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='package'
		{
			newLeafNode(otherlv_0, grammarAccess.getPackageAccess().getPackageKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.leonardo.ltl.LTL.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_description_2_0=RULE_STRING
				{
					newLeafNode(lv_description_2_0, grammarAccess.getPackageAccess().getDescriptionSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPackageRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPackageAccess().getTestingsTestingParserRuleCall_3_0_0());
					}
					lv_testings_3_0=ruleTesting
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPackageRule());
						}
						add(
							$current,
							"testings",
							lv_testings_3_0,
							"org.leonardo.ltl.LTL.Testing");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getPackageAccess().getTestableEntitiesTestableEntityParserRuleCall_3_1_0());
					}
					lv_testableEntities_4_0=ruleTestableEntity
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPackageRule());
						}
						add(
							$current,
							"testableEntities",
							lv_testableEntities_4_0,
							"org.leonardo.ltl.LTL.TestableEntity");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getPackageAccess().getTestRequirementsTestRequirementParserRuleCall_3_2_0());
					}
					lv_testRequirements_5_0=ruleTestRequirement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPackageRule());
						}
						add(
							$current,
							"testRequirements",
							lv_testRequirements_5_0,
							"org.leonardo.ltl.LTL.TestRequirement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getPackageAccess().getTestSpecificationsTestSpecificationParserRuleCall_3_3_0());
					}
					lv_testSpecifications_6_0=ruleTestSpecification
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPackageRule());
						}
						add(
							$current,
							"testSpecifications",
							lv_testSpecifications_6_0,
							"org.leonardo.ltl.LTL.TestSpecification");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getPackageAccess().getTestingMethodsTestingMethodParserRuleCall_3_4_0());
					}
					lv_testingMethods_7_0=ruleTestingMethod
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPackageRule());
						}
						add(
							$current,
							"testingMethods",
							lv_testingMethods_7_0,
							"org.leonardo.ltl.LTL.TestingMethod");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_8='end'
		{
			newLeafNode(otherlv_8, grammarAccess.getPackageAccess().getEndKeyword_4());
		}
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleTesting
entryRuleTesting returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestingRule()); }
	iv_ruleTesting=ruleTesting
	{ $current=$iv_ruleTesting.current; }
	EOF;

// Rule Testing
ruleTesting returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='testing'
		{
			newLeafNode(otherlv_0, grammarAccess.getTestingAccess().getTestingKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTestingAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestingRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.leonardo.ltl.LTL.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_description_2_0=RULE_STRING
				{
					newLeafNode(lv_description_2_0, grammarAccess.getTestingAccess().getDescriptionSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestingRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getTestingAccess().getActivitiesTestingActivityParserRuleCall_3_0());
				}
				lv_activities_3_0=ruleTestingActivity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestingRule());
					}
					add(
						$current,
						"activities",
						lv_activities_3_0,
						"org.leonardo.ltl.LTL.TestingActivity");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getTestingAccess().getRequirementsTestRequirementParserRuleCall_4_0());
				}
				lv_requirements_4_0=ruleTestRequirement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestingRule());
					}
					add(
						$current,
						"requirements",
						lv_requirements_4_0,
						"org.leonardo.ltl.LTL.TestRequirement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getTestingAccess().getEntitiesTestableEntityParserRuleCall_5_0());
				}
				lv_entities_5_0=ruleTestableEntity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestingRule());
					}
					add(
						$current,
						"entities",
						lv_entities_5_0,
						"org.leonardo.ltl.LTL.TestableEntity");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='end'
		{
			newLeafNode(otherlv_6, grammarAccess.getTestingAccess().getEndKeyword_6());
		}
	)
;

// Entry rule entryRuleTestingActivity
entryRuleTestingActivity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestingActivityRule()); }
	iv_ruleTestingActivity=ruleTestingActivity
	{ $current=$iv_ruleTestingActivity.current; }
	EOF;

// Rule TestingActivity
ruleTestingActivity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTestingActivityAccess().getTestingDesignParserRuleCall_0());
		}
		this_TestingDesign_0=ruleTestingDesign
		{
			$current = $this_TestingDesign_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTestingActivityAccess().getTestingRealisationParserRuleCall_1());
		}
		this_TestingRealisation_1=ruleTestingRealisation
		{
			$current = $this_TestingRealisation_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTestingActivityAccess().getTestingAnalysisParserRuleCall_2());
		}
		this_TestingAnalysis_2=ruleTestingAnalysis
		{
			$current = $this_TestingAnalysis_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTestingDesign
entryRuleTestingDesign returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestingDesignRule()); }
	iv_ruleTestingDesign=ruleTestingDesign
	{ $current=$iv_ruleTestingDesign.current; }
	EOF;

// Rule TestingDesign
ruleTestingDesign returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='design'
		{
			newLeafNode(otherlv_0, grammarAccess.getTestingDesignAccess().getDesignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTestingDesignAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestingDesignRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.leonardo.ltl.LTL.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_description_2_0=RULE_STRING
				{
					newLeafNode(lv_description_2_0, grammarAccess.getTestingDesignAccess().getDescriptionSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestingDesignRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getTestingDesignAccess().getMethodTestingMethodParserRuleCall_3_0());
				}
				lv_method_3_0=ruleTestingMethod
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestingDesignRule());
					}
					add(
						$current,
						"method",
						lv_method_3_0,
						"org.leonardo.ltl.LTL.TestingMethod");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='end'
		{
			newLeafNode(otherlv_4, grammarAccess.getTestingDesignAccess().getEndKeyword_4());
		}
	)
;

// Entry rule entryRuleTestingRealisation
entryRuleTestingRealisation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestingRealisationRule()); }
	iv_ruleTestingRealisation=ruleTestingRealisation
	{ $current=$iv_ruleTestingRealisation.current; }
	EOF;

// Rule TestingRealisation
ruleTestingRealisation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='realisation'
		{
			newLeafNode(otherlv_0, grammarAccess.getTestingRealisationAccess().getRealisationKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTestingRealisationAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestingRealisationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.leonardo.ltl.LTL.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_description_2_0=RULE_STRING
				{
					newLeafNode(lv_description_2_0, grammarAccess.getTestingRealisationAccess().getDescriptionSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestingRealisationRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getTestingRealisationAccess().getMethodTestingMethodParserRuleCall_3_0());
				}
				lv_method_3_0=ruleTestingMethod
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestingRealisationRule());
					}
					add(
						$current,
						"method",
						lv_method_3_0,
						"org.leonardo.ltl.LTL.TestingMethod");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='end'
		{
			newLeafNode(otherlv_4, grammarAccess.getTestingRealisationAccess().getEndKeyword_4());
		}
	)
;

// Entry rule entryRuleTestingAnalysis
entryRuleTestingAnalysis returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestingAnalysisRule()); }
	iv_ruleTestingAnalysis=ruleTestingAnalysis
	{ $current=$iv_ruleTestingAnalysis.current; }
	EOF;

// Rule TestingAnalysis
ruleTestingAnalysis returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='analysis'
		{
			newLeafNode(otherlv_0, grammarAccess.getTestingAnalysisAccess().getAnalysisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTestingAnalysisAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestingAnalysisRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.leonardo.ltl.LTL.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_description_2_0=RULE_STRING
				{
					newLeafNode(lv_description_2_0, grammarAccess.getTestingAnalysisAccess().getDescriptionSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestingAnalysisRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getTestingAnalysisAccess().getMethodTestingMethodParserRuleCall_3_0());
				}
				lv_method_3_0=ruleTestingMethod
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestingAnalysisRule());
					}
					add(
						$current,
						"method",
						lv_method_3_0,
						"org.leonardo.ltl.LTL.TestingMethod");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='end'
		{
			newLeafNode(otherlv_4, grammarAccess.getTestingAnalysisAccess().getEndKeyword_4());
		}
	)
;

// Entry rule entryRuleTestableEntity
entryRuleTestableEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestableEntityRule()); }
	iv_ruleTestableEntity=ruleTestableEntity
	{ $current=$iv_ruleTestableEntity.current; }
	EOF;

// Rule TestableEntity
ruleTestableEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='entity'
		{
			newLeafNode(otherlv_0, grammarAccess.getTestableEntityAccess().getEntityKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTestableEntityAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestableEntityRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.leonardo.ltl.LTL.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_description_2_0=RULE_STRING
				{
					newLeafNode(lv_description_2_0, grammarAccess.getTestableEntityAccess().getDescriptionSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestableEntityRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
		otherlv_3='end'
		{
			newLeafNode(otherlv_3, grammarAccess.getTestableEntityAccess().getEndKeyword_3());
		}
	)
;

// Entry rule entryRuleTestRequirement
entryRuleTestRequirement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestRequirementRule()); }
	iv_ruleTestRequirement=ruleTestRequirement
	{ $current=$iv_ruleTestRequirement.current; }
	EOF;

// Rule TestRequirement
ruleTestRequirement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='requirement'
		{
			newLeafNode(otherlv_0, grammarAccess.getTestRequirementAccess().getRequirementKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTestRequirementAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestRequirementRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.leonardo.ltl.LTL.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_description_2_0=RULE_STRING
				{
					newLeafNode(lv_description_2_0, grammarAccess.getTestRequirementAccess().getDescriptionSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestRequirementRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
		otherlv_3='end'
		{
			newLeafNode(otherlv_3, grammarAccess.getTestRequirementAccess().getEndKeyword_3());
		}
	)
;

// Entry rule entryRuleTestSpecification
entryRuleTestSpecification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestSpecificationRule()); }
	iv_ruleTestSpecification=ruleTestSpecification
	{ $current=$iv_ruleTestSpecification.current; }
	EOF;

// Rule TestSpecification
ruleTestSpecification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTestSpecificationAccess().getTestSuiteParserRuleCall_0());
		}
		this_TestSuite_0=ruleTestSuite
		{
			$current = $this_TestSuite_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTestSpecificationAccess().getTestCaseParserRuleCall_1());
		}
		this_TestCase_1=ruleTestCase
		{
			$current = $this_TestCase_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTestSuite
entryRuleTestSuite returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestSuiteRule()); }
	iv_ruleTestSuite=ruleTestSuite
	{ $current=$iv_ruleTestSuite.current; }
	EOF;

// Rule TestSuite
ruleTestSuite returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='suite'
		{
			newLeafNode(otherlv_0, grammarAccess.getTestSuiteAccess().getSuiteKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTestSuiteAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestSuiteRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.leonardo.ltl.LTL.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_description_2_0=RULE_STRING
				{
					newLeafNode(lv_description_2_0, grammarAccess.getTestSuiteAccess().getDescriptionSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestSuiteRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getTestSuiteAccess().getTestCasesTestCaseParserRuleCall_3_0());
				}
				lv_testCases_3_0=ruleTestCase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestSuiteRule());
					}
					add(
						$current,
						"testCases",
						lv_testCases_3_0,
						"org.leonardo.ltl.LTL.TestCase");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='end'
		{
			newLeafNode(otherlv_4, grammarAccess.getTestSuiteAccess().getEndKeyword_4());
		}
	)
;

// Entry rule entryRuleTestCase
entryRuleTestCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestCaseRule()); }
	iv_ruleTestCase=ruleTestCase
	{ $current=$iv_ruleTestCase.current; }
	EOF;

// Rule TestCase
ruleTestCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='case'
		{
			newLeafNode(otherlv_0, grammarAccess.getTestCaseAccess().getCaseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTestCaseAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestCaseRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.leonardo.ltl.LTL.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_description_2_0=RULE_STRING
				{
					newLeafNode(lv_description_2_0, grammarAccess.getTestCaseAccess().getDescriptionSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestCaseRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
		otherlv_3='pre'
		{
			newLeafNode(otherlv_3, grammarAccess.getTestCaseAccess().getPreKeyword_3());
		}
		(
			(
				lv_precondition_4_0=RULE_STRING
				{
					newLeafNode(lv_precondition_4_0, grammarAccess.getTestCaseAccess().getPreconditionSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestCaseRule());
					}
					setWithLastConsumed(
						$current,
						"precondition",
						lv_precondition_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
		otherlv_5='post'
		{
			newLeafNode(otherlv_5, grammarAccess.getTestCaseAccess().getPostKeyword_5());
		}
		(
			(
				lv_postcondition_6_0=RULE_STRING
				{
					newLeafNode(lv_postcondition_6_0, grammarAccess.getTestCaseAccess().getPostconditionSTRINGTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestCaseRule());
					}
					setWithLastConsumed(
						$current,
						"postcondition",
						lv_postcondition_6_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getTestCaseAccess().getInputsInputParserRuleCall_7_0());
				}
				lv_inputs_7_0=ruleInput
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestCaseRule());
					}
					add(
						$current,
						"inputs",
						lv_inputs_7_0,
						"org.leonardo.ltl.LTL.Input");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getTestCaseAccess().getExpectedResultsExpectedResultsParserRuleCall_8_0());
				}
				lv_expectedResults_8_0=ruleExpectedResults
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestCaseRule());
					}
					add(
						$current,
						"expectedResults",
						lv_expectedResults_8_0,
						"org.leonardo.ltl.LTL.ExpectedResults");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_9='end'
		{
			newLeafNode(otherlv_9, grammarAccess.getTestCaseAccess().getEndKeyword_9());
		}
	)
;

// Entry rule entryRuleInput
entryRuleInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputRule()); }
	iv_ruleInput=ruleInput
	{ $current=$iv_ruleInput.current; }
	EOF;

// Rule Input
ruleInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='input'
		{
			newLeafNode(otherlv_0, grammarAccess.getInputAccess().getInputKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInputRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getInputAccess().getInputsTestableEntityCrossReference_1_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpectedResults
entryRuleExpectedResults returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpectedResultsRule()); }
	iv_ruleExpectedResults=ruleExpectedResults
	{ $current=$iv_ruleExpectedResults.current; }
	EOF;

// Rule ExpectedResults
ruleExpectedResults returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='expect'
			{
				newLeafNode(otherlv_0, grammarAccess.getExpectedResultsAccess().getExpectKeyword_0_0());
			}
			(
				(
					lv_expects_1_0=RULE_STRING
					{
						newLeafNode(lv_expects_1_0, grammarAccess.getExpectedResultsAccess().getExpectsSTRINGTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpectedResultsRule());
						}
						addWithLastConsumed(
							$current,
							"expects",
							lv_expects_1_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		this_INT_2=RULE_INT
		{
			newLeafNode(this_INT_2, grammarAccess.getExpectedResultsAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleTestingMethod
entryRuleTestingMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestingMethodRule()); }
	iv_ruleTestingMethod=ruleTestingMethod
	{ $current=$iv_ruleTestingMethod.current; }
	EOF;

// Rule TestingMethod
ruleTestingMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='method'
		{
			newLeafNode(otherlv_0, grammarAccess.getTestingMethodAccess().getMethodKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTestingMethodAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestingMethodRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.leonardo.ltl.LTL.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_description_2_0=RULE_STRING
				{
					newLeafNode(lv_description_2_0, grammarAccess.getTestingMethodAccess().getDescriptionSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestingMethodRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
		otherlv_3='end'
		{
			newLeafNode(otherlv_3, grammarAccess.getTestingMethodAccess().getEndKeyword_3());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
