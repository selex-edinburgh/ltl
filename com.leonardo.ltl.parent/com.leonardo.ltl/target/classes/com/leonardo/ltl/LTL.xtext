// automatically generated by Xtext
grammar com.leonardo.ltl.LTL with org.eclipse.xtext.common.Terminals

import "http://www.leonardo.com/ltl/LTL"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
	{Model} packages+=(Package)*;

Package returns Package:
	'package' name=QualifiedName
	(
		('description' description=STRING)? &
		((packagableElements+=PackagableElement)*)
	)
	'end';

PackagableElement returns PackagableElement:
	TestExecution | TestableEntity | TestRequirement | TestSpecification;

TestSpecification returns TestSpecification:
	TestSuite | TestCase;

TestableEntity:
	{TestableEntity}
	'entity' name=QualifiedName
	(
		('description' description=STRING)? &
		('version' version=STRING)?
	)
	'end';

TestRequirement returns TestRequirement:
	{TestRequirement}
	'requirement' name=QualifiedName
	(
		('description' description=STRING)? &
		('version' version=STRING)? &
		('entity' testableEntity=[TestableEntity|QualifiedName])?
	)
	'end';

TestSuite returns TestSuite:
	{TestSuite}
	'suite' name=QualifiedName
	(
		('description' description=STRING)? & 
		('date' creationDate=DATE)? &
		('version' version=STRING)? &
		('cases'
		(testSpecifications+=[TestSpecification|QualifiedName])*
		'end') 
	)
	'end';


TestCase returns TestCase:
	{TestCase}
	'case' name=QualifiedName
	(
		('description' description=STRING)? & 
		('date' creationDate=DATE)? &
		('version' version=STRING)? &
		('precondition' precondition=STRING)? &
		('method' testingMethod=STRING)? &
		('expectedResult' expectedResult=STRING)? &
		('postcondition' postcondition=STRING)? &
		('inputs' inputs+=STRING ("," inputs+=STRING)*)? &
		('entities'
			(tests+=[TestableEntity|QualifiedName])*
		'end') &
		('requirements'
			(demonstratesSatisfactionOf+=[TestRequirement|QualifiedName])*
		'end')
	)	
	'end';

TestExecution returns TestExecution:
	'test' name=QualifiedName (
		('description' description=STRING)? &
		('date' executionDate=DATE)? &
		('specification' (testSpecifications+=[TestSpecification|QualifiedName])* 'end')
	)
	'end';

QualifiedName hidden():
	ID ('.' ID)*;

Boolean returns ecore::EBoolean:
	'true' | 'false';
	
DATE returns ecore::EDate: 
	STRING;