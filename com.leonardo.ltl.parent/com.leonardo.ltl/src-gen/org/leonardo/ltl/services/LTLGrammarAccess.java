/*
 * generated by Xtext 2.31.0
 */
package org.leonardo.ltl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LTLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.leonardo.ltl.LTL.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackagePackageParserRuleCall_1_0 = (RuleCall)cPackageAssignment_1.eContents().get(0);
		
		////Greeting:
		////    'Hello' name=ID '!';
		//Model:
		//    {Model} package += (Package)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Model} package += (Package)*
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//package += (Package)*
		public Assignment getPackageAssignment_1() { return cPackageAssignment_1; }
		
		//(Package)
		public RuleCall getPackagePackageParserRuleCall_1_0() { return cPackagePackageParserRuleCall_1_0; }
	}
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.leonardo.ltl.LTL.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cTestingsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cTestingsTestingParserRuleCall_3_0_0 = (RuleCall)cTestingsAssignment_3_0.eContents().get(0);
		private final Assignment cTestableEntitiesAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cTestableEntitiesTestableEntityParserRuleCall_3_1_0 = (RuleCall)cTestableEntitiesAssignment_3_1.eContents().get(0);
		private final Assignment cTestRequirementsAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cTestRequirementsTestRequirementParserRuleCall_3_2_0 = (RuleCall)cTestRequirementsAssignment_3_2.eContents().get(0);
		private final Assignment cTestSpecificationsAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cTestSpecificationsTestSpecificationParserRuleCall_3_3_0 = (RuleCall)cTestSpecificationsAssignment_3_3.eContents().get(0);
		private final Assignment cTestingMethodsAssignment_3_4 = (Assignment)cAlternatives_3.eContents().get(4);
		private final RuleCall cTestingMethodsTestingMethodParserRuleCall_3_4_0 = (RuleCall)cTestingMethodsAssignment_3_4.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Package:
		//    'package' name=QualifiedName
		//        (description = STRING)?
		//        (testings += Testing
		//            | testableEntities += TestableEntity
		//            | testRequirements += TestRequirement
		//            | testSpecifications += TestSpecification
		//            | testingMethods += TestingMethod
		//        )*
		//    'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=QualifiedName
		//    (description = STRING)?
		//    (testings += Testing
		//        | testableEntities += TestableEntity
		//        | testRequirements += TestRequirement
		//        | testSpecifications += TestSpecification
		//        | testingMethods += TestingMethod
		//    )*
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//(description = STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//(testings += Testing
		//    | testableEntities += TestableEntity
		//    | testRequirements += TestRequirement
		//    | testSpecifications += TestSpecification
		//    | testingMethods += TestingMethod
		//)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//testings += Testing
		public Assignment getTestingsAssignment_3_0() { return cTestingsAssignment_3_0; }
		
		//Testing
		public RuleCall getTestingsTestingParserRuleCall_3_0_0() { return cTestingsTestingParserRuleCall_3_0_0; }
		
		//testableEntities += TestableEntity
		public Assignment getTestableEntitiesAssignment_3_1() { return cTestableEntitiesAssignment_3_1; }
		
		//TestableEntity
		public RuleCall getTestableEntitiesTestableEntityParserRuleCall_3_1_0() { return cTestableEntitiesTestableEntityParserRuleCall_3_1_0; }
		
		//testRequirements += TestRequirement
		public Assignment getTestRequirementsAssignment_3_2() { return cTestRequirementsAssignment_3_2; }
		
		//TestRequirement
		public RuleCall getTestRequirementsTestRequirementParserRuleCall_3_2_0() { return cTestRequirementsTestRequirementParserRuleCall_3_2_0; }
		
		//testSpecifications += TestSpecification
		public Assignment getTestSpecificationsAssignment_3_3() { return cTestSpecificationsAssignment_3_3; }
		
		//TestSpecification
		public RuleCall getTestSpecificationsTestSpecificationParserRuleCall_3_3_0() { return cTestSpecificationsTestSpecificationParserRuleCall_3_3_0; }
		
		//testingMethods += TestingMethod
		public Assignment getTestingMethodsAssignment_3_4() { return cTestingMethodsAssignment_3_4; }
		
		//TestingMethod
		public RuleCall getTestingMethodsTestingMethodParserRuleCall_3_4_0() { return cTestingMethodsTestingMethodParserRuleCall_3_4_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.leonardo.ltl.LTL.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName hidden():
		//    ID ('.' ID)* ;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class TestingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.leonardo.ltl.LTL.Testing");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cActivitiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActivitiesTestingActivityParserRuleCall_3_0 = (RuleCall)cActivitiesAssignment_3.eContents().get(0);
		private final Assignment cRequirementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRequirementsTestRequirementParserRuleCall_4_0 = (RuleCall)cRequirementsAssignment_4.eContents().get(0);
		private final Assignment cEntitiesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEntitiesTestableEntityParserRuleCall_5_0 = (RuleCall)cEntitiesAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Testing:
		//    'testing' name=QualifiedName
		//    (description = STRING)?
		//    (activities += TestingActivity)*
		//    (requirements += TestRequirement)*
		//    (entities += TestableEntity)*
		//    'end'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'testing' name=QualifiedName
		//(description = STRING)?
		//(activities += TestingActivity)*
		//(requirements += TestRequirement)*
		//(entities += TestableEntity)*
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'testing'
		public Keyword getTestingKeyword_0() { return cTestingKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//(description = STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//(activities += TestingActivity)*
		public Assignment getActivitiesAssignment_3() { return cActivitiesAssignment_3; }
		
		//TestingActivity
		public RuleCall getActivitiesTestingActivityParserRuleCall_3_0() { return cActivitiesTestingActivityParserRuleCall_3_0; }
		
		//(requirements += TestRequirement)*
		public Assignment getRequirementsAssignment_4() { return cRequirementsAssignment_4; }
		
		//TestRequirement
		public RuleCall getRequirementsTestRequirementParserRuleCall_4_0() { return cRequirementsTestRequirementParserRuleCall_4_0; }
		
		//(entities += TestableEntity)*
		public Assignment getEntitiesAssignment_5() { return cEntitiesAssignment_5; }
		
		//TestableEntity
		public RuleCall getEntitiesTestableEntityParserRuleCall_5_0() { return cEntitiesTestableEntityParserRuleCall_5_0; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}
	public class TestingActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.leonardo.ltl.LTL.TestingActivity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTestingDesignParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTestingRealisationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTestingAnalysisParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TestingActivity:
		//    TestingDesign | TestingRealisation | TestingAnalysis
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TestingDesign | TestingRealisation | TestingAnalysis
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TestingDesign
		public RuleCall getTestingDesignParserRuleCall_0() { return cTestingDesignParserRuleCall_0; }
		
		//TestingRealisation
		public RuleCall getTestingRealisationParserRuleCall_1() { return cTestingRealisationParserRuleCall_1; }
		
		//TestingAnalysis
		public RuleCall getTestingAnalysisParserRuleCall_2() { return cTestingAnalysisParserRuleCall_2; }
	}
	public class TestingDesignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.leonardo.ltl.LTL.TestingDesign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDesignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cMethodAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMethodTestingMethodParserRuleCall_3_0 = (RuleCall)cMethodAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TestingDesign:
		//    'design' name=QualifiedName
		//    (description = STRING)?
		//    (method += TestingMethod)*
		//    'end'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'design' name=QualifiedName
		//(description = STRING)?
		//(method += TestingMethod)*
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'design'
		public Keyword getDesignKeyword_0() { return cDesignKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//(description = STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//(method += TestingMethod)*
		public Assignment getMethodAssignment_3() { return cMethodAssignment_3; }
		
		//TestingMethod
		public RuleCall getMethodTestingMethodParserRuleCall_3_0() { return cMethodTestingMethodParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class TestingRealisationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.leonardo.ltl.LTL.TestingRealisation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRealisationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cMethodAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMethodTestingMethodParserRuleCall_3_0 = (RuleCall)cMethodAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TestingRealisation:
		//    'realisation' name=QualifiedName
		//    (description = STRING)?
		//    (method += TestingMethod)*
		//    'end'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'realisation' name=QualifiedName
		//(description = STRING)?
		//(method += TestingMethod)*
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'realisation'
		public Keyword getRealisationKeyword_0() { return cRealisationKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//(description = STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//(method += TestingMethod)*
		public Assignment getMethodAssignment_3() { return cMethodAssignment_3; }
		
		//TestingMethod
		public RuleCall getMethodTestingMethodParserRuleCall_3_0() { return cMethodTestingMethodParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class TestingAnalysisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.leonardo.ltl.LTL.TestingAnalysis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnalysisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cMethodAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMethodTestingMethodParserRuleCall_3_0 = (RuleCall)cMethodAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TestingAnalysis:
		//    'analysis' name=QualifiedName
		//    (description = STRING)?
		//    (method += TestingMethod)*
		//    'end'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'analysis' name=QualifiedName
		//(description = STRING)?
		//(method += TestingMethod)*
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'analysis'
		public Keyword getAnalysisKeyword_0() { return cAnalysisKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//(description = STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//(method += TestingMethod)*
		public Assignment getMethodAssignment_3() { return cMethodAssignment_3; }
		
		//TestingMethod
		public RuleCall getMethodTestingMethodParserRuleCall_3_0() { return cMethodTestingMethodParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class TestableEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.leonardo.ltl.LTL.TestableEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TestableEntity:
		//    'entity' name=QualifiedName
		//    (description = STRING)?
		//    'end'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' name=QualifiedName
		//(description = STRING)?
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//(description = STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'end'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}
	public class TestRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.leonardo.ltl.LTL.TestRequirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequirementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TestRequirement:
		//    'requirement' name=QualifiedName
		//    (description = STRING)?
		//    'end'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'requirement' name=QualifiedName
		//(description = STRING)?
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'requirement'
		public Keyword getRequirementKeyword_0() { return cRequirementKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//(description = STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'end'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}
	public class TestSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.leonardo.ltl.LTL.TestSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTestSuiteParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTestCaseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TestSpecification:
		//    TestSuite | TestCase
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TestSuite | TestCase
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TestSuite
		public RuleCall getTestSuiteParserRuleCall_0() { return cTestSuiteParserRuleCall_0; }
		
		//TestCase
		public RuleCall getTestCaseParserRuleCall_1() { return cTestCaseParserRuleCall_1; }
	}
	public class TestSuiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.leonardo.ltl.LTL.TestSuite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSuiteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cTestCasesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTestCasesTestCaseParserRuleCall_3_0 = (RuleCall)cTestCasesAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TestSuite:
		//    'suite' name=QualifiedName
		//    (description = STRING)?
		//    (testCases += TestCase)*
		//    'end'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'suite' name=QualifiedName
		//(description = STRING)?
		//(testCases += TestCase)*
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'suite'
		public Keyword getSuiteKeyword_0() { return cSuiteKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//(description = STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//(testCases += TestCase)*
		public Assignment getTestCasesAssignment_3() { return cTestCasesAssignment_3; }
		
		//TestCase
		public RuleCall getTestCasesTestCaseParserRuleCall_3_0() { return cTestCasesTestCaseParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class TestCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.leonardo.ltl.LTL.TestCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cPreKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPreconditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPreconditionSTRINGTerminalRuleCall_4_0 = (RuleCall)cPreconditionAssignment_4.eContents().get(0);
		private final Keyword cPostKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPostconditionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPostconditionSTRINGTerminalRuleCall_6_0 = (RuleCall)cPostconditionAssignment_6.eContents().get(0);
		private final Assignment cInputsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cInputsInputParserRuleCall_7_0 = (RuleCall)cInputsAssignment_7.eContents().get(0);
		private final Assignment cExpectedResultsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cExpectedResultsExpectedResultsParserRuleCall_8_0 = (RuleCall)cExpectedResultsAssignment_8.eContents().get(0);
		private final Keyword cEndKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//TestCase:
		//    'case' name=QualifiedName
		//    (description = STRING)?
		//    'pre' (precondition = STRING)?
		//    'post' (postcondition = STRING)?
		//    (inputs +=Input)*
		//    (expectedResults +=ExpectedResults)*
		//    'end'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'case' name=QualifiedName
		//(description = STRING)?
		//'pre' (precondition = STRING)?
		//'post' (postcondition = STRING)?
		//(inputs +=Input)*
		//(expectedResults +=ExpectedResults)*
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//(description = STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'pre'
		public Keyword getPreKeyword_3() { return cPreKeyword_3; }
		
		//(precondition = STRING)?
		public Assignment getPreconditionAssignment_4() { return cPreconditionAssignment_4; }
		
		//STRING
		public RuleCall getPreconditionSTRINGTerminalRuleCall_4_0() { return cPreconditionSTRINGTerminalRuleCall_4_0; }
		
		//'post'
		public Keyword getPostKeyword_5() { return cPostKeyword_5; }
		
		//(postcondition = STRING)?
		public Assignment getPostconditionAssignment_6() { return cPostconditionAssignment_6; }
		
		//STRING
		public RuleCall getPostconditionSTRINGTerminalRuleCall_6_0() { return cPostconditionSTRINGTerminalRuleCall_6_0; }
		
		//(inputs +=Input)*
		public Assignment getInputsAssignment_7() { return cInputsAssignment_7; }
		
		//Input
		public RuleCall getInputsInputParserRuleCall_7_0() { return cInputsInputParserRuleCall_7_0; }
		
		//(expectedResults +=ExpectedResults)*
		public Assignment getExpectedResultsAssignment_8() { return cExpectedResultsAssignment_8; }
		
		//ExpectedResults
		public RuleCall getExpectedResultsExpectedResultsParserRuleCall_8_0() { return cExpectedResultsExpectedResultsParserRuleCall_8_0; }
		
		//'end'
		public Keyword getEndKeyword_9() { return cEndKeyword_9; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.leonardo.ltl.LTL.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInputsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cInputsTestableEntityCrossReference_1_0 = (CrossReference)cInputsAssignment_1.eContents().get(0);
		private final RuleCall cInputsTestableEntityQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cInputsTestableEntityCrossReference_1_0.eContents().get(1);
		
		//Input:
		//    ('input' inputs += [TestableEntity|QualifiedName])
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('input' inputs += [TestableEntity|QualifiedName])
		public Group getGroup() { return cGroup; }
		
		//'input'
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }
		
		//inputs += [TestableEntity|QualifiedName]
		public Assignment getInputsAssignment_1() { return cInputsAssignment_1; }
		
		//[TestableEntity|QualifiedName]
		public CrossReference getInputsTestableEntityCrossReference_1_0() { return cInputsTestableEntityCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getInputsTestableEntityQualifiedNameParserRuleCall_1_0_1() { return cInputsTestableEntityQualifiedNameParserRuleCall_1_0_1; }
	}
	public class ExpectedResultsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.leonardo.ltl.LTL.ExpectedResults");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cExpectKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExpectsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpectsSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cExpectsAssignment_0_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExpectedResults:
		//    ('expect' expects += STRING | INT)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('expect' expects += STRING | INT)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'expect' expects += STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//'expect'
		public Keyword getExpectKeyword_0_0() { return cExpectKeyword_0_0; }
		
		//expects += STRING
		public Assignment getExpectsAssignment_0_1() { return cExpectsAssignment_0_1; }
		
		//STRING
		public RuleCall getExpectsSTRINGTerminalRuleCall_0_1_0() { return cExpectsSTRINGTerminalRuleCall_0_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class TestingMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.leonardo.ltl.LTL.TestingMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMethodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TestingMethod:
		//    'method' name=QualifiedName
		//    (description = STRING)?
		//    'end'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'method' name=QualifiedName
		//(description = STRING)?
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'method'
		public Keyword getMethodKeyword_0() { return cMethodKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//(description = STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//'end'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}
	
	
	private final ModelElements pModel;
	private final PackageElements pPackage;
	private final QualifiedNameElements pQualifiedName;
	private final TestingElements pTesting;
	private final TestingActivityElements pTestingActivity;
	private final TestingDesignElements pTestingDesign;
	private final TestingRealisationElements pTestingRealisation;
	private final TestingAnalysisElements pTestingAnalysis;
	private final TestableEntityElements pTestableEntity;
	private final TestRequirementElements pTestRequirement;
	private final TestSpecificationElements pTestSpecification;
	private final TestSuiteElements pTestSuite;
	private final TestCaseElements pTestCase;
	private final InputElements pInput;
	private final ExpectedResultsElements pExpectedResults;
	private final TestingMethodElements pTestingMethod;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LTLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPackage = new PackageElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pTesting = new TestingElements();
		this.pTestingActivity = new TestingActivityElements();
		this.pTestingDesign = new TestingDesignElements();
		this.pTestingRealisation = new TestingRealisationElements();
		this.pTestingAnalysis = new TestingAnalysisElements();
		this.pTestableEntity = new TestableEntityElements();
		this.pTestRequirement = new TestRequirementElements();
		this.pTestSpecification = new TestSpecificationElements();
		this.pTestSuite = new TestSuiteElements();
		this.pTestCase = new TestCaseElements();
		this.pInput = new InputElements();
		this.pExpectedResults = new ExpectedResultsElements();
		this.pTestingMethod = new TestingMethodElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.leonardo.ltl.LTL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////Greeting:
	////    'Hello' name=ID '!';
	//Model:
	//    {Model} package += (Package)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Package:
	//    'package' name=QualifiedName
	//        (description = STRING)?
	//        (testings += Testing
	//            | testableEntities += TestableEntity
	//            | testRequirements += TestRequirement
	//            | testSpecifications += TestSpecification
	//            | testingMethods += TestingMethod
	//        )*
	//    'end';
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//QualifiedName hidden():
	//    ID ('.' ID)* ;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Testing:
	//    'testing' name=QualifiedName
	//    (description = STRING)?
	//    (activities += TestingActivity)*
	//    (requirements += TestRequirement)*
	//    (entities += TestableEntity)*
	//    'end'
	//;
	public TestingElements getTestingAccess() {
		return pTesting;
	}
	
	public ParserRule getTestingRule() {
		return getTestingAccess().getRule();
	}
	
	//TestingActivity:
	//    TestingDesign | TestingRealisation | TestingAnalysis
	//;
	public TestingActivityElements getTestingActivityAccess() {
		return pTestingActivity;
	}
	
	public ParserRule getTestingActivityRule() {
		return getTestingActivityAccess().getRule();
	}
	
	//TestingDesign:
	//    'design' name=QualifiedName
	//    (description = STRING)?
	//    (method += TestingMethod)*
	//    'end'
	//;
	public TestingDesignElements getTestingDesignAccess() {
		return pTestingDesign;
	}
	
	public ParserRule getTestingDesignRule() {
		return getTestingDesignAccess().getRule();
	}
	
	//TestingRealisation:
	//    'realisation' name=QualifiedName
	//    (description = STRING)?
	//    (method += TestingMethod)*
	//    'end'
	//;
	public TestingRealisationElements getTestingRealisationAccess() {
		return pTestingRealisation;
	}
	
	public ParserRule getTestingRealisationRule() {
		return getTestingRealisationAccess().getRule();
	}
	
	//TestingAnalysis:
	//    'analysis' name=QualifiedName
	//    (description = STRING)?
	//    (method += TestingMethod)*
	//    'end'
	//;
	public TestingAnalysisElements getTestingAnalysisAccess() {
		return pTestingAnalysis;
	}
	
	public ParserRule getTestingAnalysisRule() {
		return getTestingAnalysisAccess().getRule();
	}
	
	//TestableEntity:
	//    'entity' name=QualifiedName
	//    (description = STRING)?
	//    'end'
	//;
	public TestableEntityElements getTestableEntityAccess() {
		return pTestableEntity;
	}
	
	public ParserRule getTestableEntityRule() {
		return getTestableEntityAccess().getRule();
	}
	
	//TestRequirement:
	//    'requirement' name=QualifiedName
	//    (description = STRING)?
	//    'end'
	//;
	public TestRequirementElements getTestRequirementAccess() {
		return pTestRequirement;
	}
	
	public ParserRule getTestRequirementRule() {
		return getTestRequirementAccess().getRule();
	}
	
	//TestSpecification:
	//    TestSuite | TestCase
	//;
	public TestSpecificationElements getTestSpecificationAccess() {
		return pTestSpecification;
	}
	
	public ParserRule getTestSpecificationRule() {
		return getTestSpecificationAccess().getRule();
	}
	
	//TestSuite:
	//    'suite' name=QualifiedName
	//    (description = STRING)?
	//    (testCases += TestCase)*
	//    'end'
	//;
	public TestSuiteElements getTestSuiteAccess() {
		return pTestSuite;
	}
	
	public ParserRule getTestSuiteRule() {
		return getTestSuiteAccess().getRule();
	}
	
	//TestCase:
	//    'case' name=QualifiedName
	//    (description = STRING)?
	//    'pre' (precondition = STRING)?
	//    'post' (postcondition = STRING)?
	//    (inputs +=Input)*
	//    (expectedResults +=ExpectedResults)*
	//    'end'
	//;
	public TestCaseElements getTestCaseAccess() {
		return pTestCase;
	}
	
	public ParserRule getTestCaseRule() {
		return getTestCaseAccess().getRule();
	}
	
	//Input:
	//    ('input' inputs += [TestableEntity|QualifiedName])
	//;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//ExpectedResults:
	//    ('expect' expects += STRING | INT)
	//;
	public ExpectedResultsElements getExpectedResultsAccess() {
		return pExpectedResults;
	}
	
	public ParserRule getExpectedResultsRule() {
		return getExpectedResultsAccess().getRule();
	}
	
	//TestingMethod:
	//    'method' name=QualifiedName
	//    (description = STRING)?
	//    'end'
	//;
	public TestingMethodElements getTestingMethodAccess() {
		return pTestingMethod;
	}
	
	public ParserRule getTestingMethodRule() {
		return getTestingMethodAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
