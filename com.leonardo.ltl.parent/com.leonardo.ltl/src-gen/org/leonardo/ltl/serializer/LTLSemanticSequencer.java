/*
 * generated by Xtext 2.31.0
 */
package org.leonardo.ltl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.leonardo.ltl.lTL.ExpectedResults;
import org.leonardo.ltl.lTL.Input;
import org.leonardo.ltl.lTL.LTLPackage;
import org.leonardo.ltl.lTL.Model;
import org.leonardo.ltl.lTL.TestCase;
import org.leonardo.ltl.lTL.TestRequirement;
import org.leonardo.ltl.lTL.TestSuite;
import org.leonardo.ltl.lTL.TestableEntity;
import org.leonardo.ltl.lTL.Testing;
import org.leonardo.ltl.lTL.TestingAnalysis;
import org.leonardo.ltl.lTL.TestingDesign;
import org.leonardo.ltl.lTL.TestingMethod;
import org.leonardo.ltl.lTL.TestingRealisation;
import org.leonardo.ltl.services.LTLGrammarAccess;

@SuppressWarnings("all")
public class LTLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LTLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LTLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LTLPackage.EXPECTED_RESULTS:
				sequence_ExpectedResults(context, (ExpectedResults) semanticObject); 
				return; 
			case LTLPackage.INPUT:
				sequence_Input(context, (Input) semanticObject); 
				return; 
			case LTLPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case LTLPackage.PACKAGE:
				sequence_Package(context, (org.leonardo.ltl.lTL.Package) semanticObject); 
				return; 
			case LTLPackage.TEST_CASE:
				sequence_TestCase(context, (TestCase) semanticObject); 
				return; 
			case LTLPackage.TEST_REQUIREMENT:
				sequence_TestRequirement(context, (TestRequirement) semanticObject); 
				return; 
			case LTLPackage.TEST_SUITE:
				sequence_TestSuite(context, (TestSuite) semanticObject); 
				return; 
			case LTLPackage.TESTABLE_ENTITY:
				sequence_TestableEntity(context, (TestableEntity) semanticObject); 
				return; 
			case LTLPackage.TESTING:
				sequence_Testing(context, (Testing) semanticObject); 
				return; 
			case LTLPackage.TESTING_ANALYSIS:
				sequence_TestingAnalysis(context, (TestingAnalysis) semanticObject); 
				return; 
			case LTLPackage.TESTING_DESIGN:
				sequence_TestingDesign(context, (TestingDesign) semanticObject); 
				return; 
			case LTLPackage.TESTING_METHOD:
				sequence_TestingMethod(context, (TestingMethod) semanticObject); 
				return; 
			case LTLPackage.TESTING_REALISATION:
				sequence_TestingRealisation(context, (TestingRealisation) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     ExpectedResults returns ExpectedResults
	 *
	 * Constraint:
	 *     expects+=STRING
	 * </pre>
	 */
	protected void sequence_ExpectedResults(ISerializationContext context, ExpectedResults semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Input returns Input
	 *
	 * Constraint:
	 *     inputs+=[TestableEntity|QualifiedName]
	 * </pre>
	 */
	protected void sequence_Input(ISerializationContext context, Input semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     package+=Package*
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Package returns Package
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         description=STRING? 
	 *         (
	 *             testings+=Testing | 
	 *             testableEntities+=TestableEntity | 
	 *             testRequirements+=TestRequirement | 
	 *             testSpecifications+=TestSpecification | 
	 *             testingMethods+=TestingMethod
	 *         )*
	 *     )
	 * </pre>
	 */
	protected void sequence_Package(ISerializationContext context, org.leonardo.ltl.lTL.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TestSpecification returns TestCase
	 *     TestCase returns TestCase
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         description=STRING? 
	 *         precondition=STRING? 
	 *         postcondition=STRING? 
	 *         inputs+=Input* 
	 *         expectedResults+=ExpectedResults*
	 *     )
	 * </pre>
	 */
	protected void sequence_TestCase(ISerializationContext context, TestCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TestRequirement returns TestRequirement
	 *
	 * Constraint:
	 *     (name=QualifiedName description=STRING?)
	 * </pre>
	 */
	protected void sequence_TestRequirement(ISerializationContext context, TestRequirement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TestSpecification returns TestSuite
	 *     TestSuite returns TestSuite
	 *
	 * Constraint:
	 *     (name=QualifiedName description=STRING? testCases+=TestCase*)
	 * </pre>
	 */
	protected void sequence_TestSuite(ISerializationContext context, TestSuite semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TestableEntity returns TestableEntity
	 *
	 * Constraint:
	 *     (name=QualifiedName description=STRING?)
	 * </pre>
	 */
	protected void sequence_TestableEntity(ISerializationContext context, TestableEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TestingActivity returns TestingAnalysis
	 *     TestingAnalysis returns TestingAnalysis
	 *
	 * Constraint:
	 *     (name=QualifiedName description=STRING? method+=TestingMethod*)
	 * </pre>
	 */
	protected void sequence_TestingAnalysis(ISerializationContext context, TestingAnalysis semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TestingActivity returns TestingDesign
	 *     TestingDesign returns TestingDesign
	 *
	 * Constraint:
	 *     (name=QualifiedName description=STRING? method+=TestingMethod*)
	 * </pre>
	 */
	protected void sequence_TestingDesign(ISerializationContext context, TestingDesign semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TestingMethod returns TestingMethod
	 *
	 * Constraint:
	 *     (name=QualifiedName description=STRING?)
	 * </pre>
	 */
	protected void sequence_TestingMethod(ISerializationContext context, TestingMethod semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TestingActivity returns TestingRealisation
	 *     TestingRealisation returns TestingRealisation
	 *
	 * Constraint:
	 *     (name=QualifiedName description=STRING? method+=TestingMethod*)
	 * </pre>
	 */
	protected void sequence_TestingRealisation(ISerializationContext context, TestingRealisation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Testing returns Testing
	 *
	 * Constraint:
	 *     (name=QualifiedName description=STRING? activities+=TestingActivity* requirements+=TestRequirement* entities+=TestableEntity*)
	 * </pre>
	 */
	protected void sequence_Testing(ISerializationContext context, Testing semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
