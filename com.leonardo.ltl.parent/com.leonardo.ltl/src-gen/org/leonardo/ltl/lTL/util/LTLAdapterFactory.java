/**
 * generated by Xtext 2.31.0
 */
package org.leonardo.ltl.lTL.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.leonardo.ltl.lTL.ExpectedResults;
import org.leonardo.ltl.lTL.Input;
import org.leonardo.ltl.lTL.LTLPackage;
import org.leonardo.ltl.lTL.Model;
import org.leonardo.ltl.lTL.TestCase;
import org.leonardo.ltl.lTL.TestRequirement;
import org.leonardo.ltl.lTL.TestSpecification;
import org.leonardo.ltl.lTL.TestSuite;
import org.leonardo.ltl.lTL.TestableEntity;
import org.leonardo.ltl.lTL.Testing;
import org.leonardo.ltl.lTL.TestingActivity;
import org.leonardo.ltl.lTL.TestingAnalysis;
import org.leonardo.ltl.lTL.TestingDesign;
import org.leonardo.ltl.lTL.TestingMethod;
import org.leonardo.ltl.lTL.TestingRealisation;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.leonardo.ltl.lTL.LTLPackage
 * @generated
 */
public class LTLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static LTLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LTLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = LTLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LTLSwitch<Adapter> modelSwitch =
    new LTLSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter casePackage(org.leonardo.ltl.lTL.Package object)
      {
        return createPackageAdapter();
      }
      @Override
      public Adapter caseTesting(Testing object)
      {
        return createTestingAdapter();
      }
      @Override
      public Adapter caseTestingActivity(TestingActivity object)
      {
        return createTestingActivityAdapter();
      }
      @Override
      public Adapter caseTestingDesign(TestingDesign object)
      {
        return createTestingDesignAdapter();
      }
      @Override
      public Adapter caseTestingRealisation(TestingRealisation object)
      {
        return createTestingRealisationAdapter();
      }
      @Override
      public Adapter caseTestingAnalysis(TestingAnalysis object)
      {
        return createTestingAnalysisAdapter();
      }
      @Override
      public Adapter caseTestableEntity(TestableEntity object)
      {
        return createTestableEntityAdapter();
      }
      @Override
      public Adapter caseTestRequirement(TestRequirement object)
      {
        return createTestRequirementAdapter();
      }
      @Override
      public Adapter caseTestSpecification(TestSpecification object)
      {
        return createTestSpecificationAdapter();
      }
      @Override
      public Adapter caseTestSuite(TestSuite object)
      {
        return createTestSuiteAdapter();
      }
      @Override
      public Adapter caseTestCase(TestCase object)
      {
        return createTestCaseAdapter();
      }
      @Override
      public Adapter caseInput(Input object)
      {
        return createInputAdapter();
      }
      @Override
      public Adapter caseExpectedResults(ExpectedResults object)
      {
        return createExpectedResultsAdapter();
      }
      @Override
      public Adapter caseTestingMethod(TestingMethod object)
      {
        return createTestingMethodAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.leonardo.ltl.lTL.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.leonardo.ltl.lTL.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.leonardo.ltl.lTL.Package <em>Package</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.leonardo.ltl.lTL.Package
   * @generated
   */
  public Adapter createPackageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.leonardo.ltl.lTL.Testing <em>Testing</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.leonardo.ltl.lTL.Testing
   * @generated
   */
  public Adapter createTestingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.leonardo.ltl.lTL.TestingActivity <em>Testing Activity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.leonardo.ltl.lTL.TestingActivity
   * @generated
   */
  public Adapter createTestingActivityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.leonardo.ltl.lTL.TestingDesign <em>Testing Design</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.leonardo.ltl.lTL.TestingDesign
   * @generated
   */
  public Adapter createTestingDesignAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.leonardo.ltl.lTL.TestingRealisation <em>Testing Realisation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.leonardo.ltl.lTL.TestingRealisation
   * @generated
   */
  public Adapter createTestingRealisationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.leonardo.ltl.lTL.TestingAnalysis <em>Testing Analysis</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.leonardo.ltl.lTL.TestingAnalysis
   * @generated
   */
  public Adapter createTestingAnalysisAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.leonardo.ltl.lTL.TestableEntity <em>Testable Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.leonardo.ltl.lTL.TestableEntity
   * @generated
   */
  public Adapter createTestableEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.leonardo.ltl.lTL.TestRequirement <em>Test Requirement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.leonardo.ltl.lTL.TestRequirement
   * @generated
   */
  public Adapter createTestRequirementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.leonardo.ltl.lTL.TestSpecification <em>Test Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.leonardo.ltl.lTL.TestSpecification
   * @generated
   */
  public Adapter createTestSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.leonardo.ltl.lTL.TestSuite <em>Test Suite</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.leonardo.ltl.lTL.TestSuite
   * @generated
   */
  public Adapter createTestSuiteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.leonardo.ltl.lTL.TestCase <em>Test Case</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.leonardo.ltl.lTL.TestCase
   * @generated
   */
  public Adapter createTestCaseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.leonardo.ltl.lTL.Input <em>Input</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.leonardo.ltl.lTL.Input
   * @generated
   */
  public Adapter createInputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.leonardo.ltl.lTL.ExpectedResults <em>Expected Results</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.leonardo.ltl.lTL.ExpectedResults
   * @generated
   */
  public Adapter createExpectedResultsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.leonardo.ltl.lTL.TestingMethod <em>Testing Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.leonardo.ltl.lTL.TestingMethod
   * @generated
   */
  public Adapter createTestingMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //LTLAdapterFactory
