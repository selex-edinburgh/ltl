/**
 * generated by Xtext 2.31.0
 */
package org.leonardo.ltl.lTL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.leonardo.ltl.lTL.ExpectedResults;
import org.leonardo.ltl.lTL.Input;
import org.leonardo.ltl.lTL.LTLPackage;
import org.leonardo.ltl.lTL.TestCase;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Test Case</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.leonardo.ltl.lTL.impl.TestCaseImpl#getPrecondition <em>Precondition</em>}</li>
 *   <li>{@link org.leonardo.ltl.lTL.impl.TestCaseImpl#getPostcondition <em>Postcondition</em>}</li>
 *   <li>{@link org.leonardo.ltl.lTL.impl.TestCaseImpl#getInputs <em>Inputs</em>}</li>
 *   <li>{@link org.leonardo.ltl.lTL.impl.TestCaseImpl#getExpectedResults <em>Expected Results</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TestCaseImpl extends TestSpecificationImpl implements TestCase
{
  /**
   * The default value of the '{@link #getPrecondition() <em>Precondition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrecondition()
   * @generated
   * @ordered
   */
  protected static final String PRECONDITION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPrecondition() <em>Precondition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrecondition()
   * @generated
   * @ordered
   */
  protected String precondition = PRECONDITION_EDEFAULT;

  /**
   * The default value of the '{@link #getPostcondition() <em>Postcondition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPostcondition()
   * @generated
   * @ordered
   */
  protected static final String POSTCONDITION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPostcondition() <em>Postcondition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPostcondition()
   * @generated
   * @ordered
   */
  protected String postcondition = POSTCONDITION_EDEFAULT;

  /**
   * The cached value of the '{@link #getInputs() <em>Inputs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInputs()
   * @generated
   * @ordered
   */
  protected EList<Input> inputs;

  /**
   * The cached value of the '{@link #getExpectedResults() <em>Expected Results</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpectedResults()
   * @generated
   * @ordered
   */
  protected EList<ExpectedResults> expectedResults;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TestCaseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LTLPackage.Literals.TEST_CASE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPrecondition()
  {
    return precondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPrecondition(String newPrecondition)
  {
    String oldPrecondition = precondition;
    precondition = newPrecondition;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LTLPackage.TEST_CASE__PRECONDITION, oldPrecondition, precondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPostcondition()
  {
    return postcondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPostcondition(String newPostcondition)
  {
    String oldPostcondition = postcondition;
    postcondition = newPostcondition;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LTLPackage.TEST_CASE__POSTCONDITION, oldPostcondition, postcondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Input> getInputs()
  {
    if (inputs == null)
    {
      inputs = new EObjectContainmentEList<Input>(Input.class, this, LTLPackage.TEST_CASE__INPUTS);
    }
    return inputs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ExpectedResults> getExpectedResults()
  {
    if (expectedResults == null)
    {
      expectedResults = new EObjectContainmentEList<ExpectedResults>(ExpectedResults.class, this, LTLPackage.TEST_CASE__EXPECTED_RESULTS);
    }
    return expectedResults;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LTLPackage.TEST_CASE__INPUTS:
        return ((InternalEList<?>)getInputs()).basicRemove(otherEnd, msgs);
      case LTLPackage.TEST_CASE__EXPECTED_RESULTS:
        return ((InternalEList<?>)getExpectedResults()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LTLPackage.TEST_CASE__PRECONDITION:
        return getPrecondition();
      case LTLPackage.TEST_CASE__POSTCONDITION:
        return getPostcondition();
      case LTLPackage.TEST_CASE__INPUTS:
        return getInputs();
      case LTLPackage.TEST_CASE__EXPECTED_RESULTS:
        return getExpectedResults();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LTLPackage.TEST_CASE__PRECONDITION:
        setPrecondition((String)newValue);
        return;
      case LTLPackage.TEST_CASE__POSTCONDITION:
        setPostcondition((String)newValue);
        return;
      case LTLPackage.TEST_CASE__INPUTS:
        getInputs().clear();
        getInputs().addAll((Collection<? extends Input>)newValue);
        return;
      case LTLPackage.TEST_CASE__EXPECTED_RESULTS:
        getExpectedResults().clear();
        getExpectedResults().addAll((Collection<? extends ExpectedResults>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LTLPackage.TEST_CASE__PRECONDITION:
        setPrecondition(PRECONDITION_EDEFAULT);
        return;
      case LTLPackage.TEST_CASE__POSTCONDITION:
        setPostcondition(POSTCONDITION_EDEFAULT);
        return;
      case LTLPackage.TEST_CASE__INPUTS:
        getInputs().clear();
        return;
      case LTLPackage.TEST_CASE__EXPECTED_RESULTS:
        getExpectedResults().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LTLPackage.TEST_CASE__PRECONDITION:
        return PRECONDITION_EDEFAULT == null ? precondition != null : !PRECONDITION_EDEFAULT.equals(precondition);
      case LTLPackage.TEST_CASE__POSTCONDITION:
        return POSTCONDITION_EDEFAULT == null ? postcondition != null : !POSTCONDITION_EDEFAULT.equals(postcondition);
      case LTLPackage.TEST_CASE__INPUTS:
        return inputs != null && !inputs.isEmpty();
      case LTLPackage.TEST_CASE__EXPECTED_RESULTS:
        return expectedResults != null && !expectedResults.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (precondition: ");
    result.append(precondition);
    result.append(", postcondition: ");
    result.append(postcondition);
    result.append(')');
    return result.toString();
  }

} //TestCaseImpl
