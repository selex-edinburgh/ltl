/**
 * generated by Xtext 2.31.0
 */
package org.leonardo.ltl.lTL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.leonardo.ltl.lTL.LTLPackage;
import org.leonardo.ltl.lTL.TestRequirement;
import org.leonardo.ltl.lTL.TestSpecification;
import org.leonardo.ltl.lTL.TestableEntity;
import org.leonardo.ltl.lTL.Testing;
import org.leonardo.ltl.lTL.TestingMethod;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Package</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.leonardo.ltl.lTL.impl.PackageImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.leonardo.ltl.lTL.impl.PackageImpl#getDescription <em>Description</em>}</li>
 *   <li>{@link org.leonardo.ltl.lTL.impl.PackageImpl#getTestings <em>Testings</em>}</li>
 *   <li>{@link org.leonardo.ltl.lTL.impl.PackageImpl#getTestableEntities <em>Testable Entities</em>}</li>
 *   <li>{@link org.leonardo.ltl.lTL.impl.PackageImpl#getTestRequirements <em>Test Requirements</em>}</li>
 *   <li>{@link org.leonardo.ltl.lTL.impl.PackageImpl#getTestSpecifications <em>Test Specifications</em>}</li>
 *   <li>{@link org.leonardo.ltl.lTL.impl.PackageImpl#getTestingMethods <em>Testing Methods</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PackageImpl extends MinimalEObjectImpl.Container implements org.leonardo.ltl.lTL.Package
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected static final String DESCRIPTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected String description = DESCRIPTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getTestings() <em>Testings</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTestings()
   * @generated
   * @ordered
   */
  protected EList<Testing> testings;

  /**
   * The cached value of the '{@link #getTestableEntities() <em>Testable Entities</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTestableEntities()
   * @generated
   * @ordered
   */
  protected EList<TestableEntity> testableEntities;

  /**
   * The cached value of the '{@link #getTestRequirements() <em>Test Requirements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTestRequirements()
   * @generated
   * @ordered
   */
  protected EList<TestRequirement> testRequirements;

  /**
   * The cached value of the '{@link #getTestSpecifications() <em>Test Specifications</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTestSpecifications()
   * @generated
   * @ordered
   */
  protected EList<TestSpecification> testSpecifications;

  /**
   * The cached value of the '{@link #getTestingMethods() <em>Testing Methods</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTestingMethods()
   * @generated
   * @ordered
   */
  protected EList<TestingMethod> testingMethods;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PackageImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LTLPackage.Literals.PACKAGE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LTLPackage.PACKAGE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDescription()
  {
    return description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDescription(String newDescription)
  {
    String oldDescription = description;
    description = newDescription;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LTLPackage.PACKAGE__DESCRIPTION, oldDescription, description));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Testing> getTestings()
  {
    if (testings == null)
    {
      testings = new EObjectContainmentEList<Testing>(Testing.class, this, LTLPackage.PACKAGE__TESTINGS);
    }
    return testings;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TestableEntity> getTestableEntities()
  {
    if (testableEntities == null)
    {
      testableEntities = new EObjectContainmentEList<TestableEntity>(TestableEntity.class, this, LTLPackage.PACKAGE__TESTABLE_ENTITIES);
    }
    return testableEntities;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TestRequirement> getTestRequirements()
  {
    if (testRequirements == null)
    {
      testRequirements = new EObjectContainmentEList<TestRequirement>(TestRequirement.class, this, LTLPackage.PACKAGE__TEST_REQUIREMENTS);
    }
    return testRequirements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TestSpecification> getTestSpecifications()
  {
    if (testSpecifications == null)
    {
      testSpecifications = new EObjectContainmentEList<TestSpecification>(TestSpecification.class, this, LTLPackage.PACKAGE__TEST_SPECIFICATIONS);
    }
    return testSpecifications;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TestingMethod> getTestingMethods()
  {
    if (testingMethods == null)
    {
      testingMethods = new EObjectContainmentEList<TestingMethod>(TestingMethod.class, this, LTLPackage.PACKAGE__TESTING_METHODS);
    }
    return testingMethods;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LTLPackage.PACKAGE__TESTINGS:
        return ((InternalEList<?>)getTestings()).basicRemove(otherEnd, msgs);
      case LTLPackage.PACKAGE__TESTABLE_ENTITIES:
        return ((InternalEList<?>)getTestableEntities()).basicRemove(otherEnd, msgs);
      case LTLPackage.PACKAGE__TEST_REQUIREMENTS:
        return ((InternalEList<?>)getTestRequirements()).basicRemove(otherEnd, msgs);
      case LTLPackage.PACKAGE__TEST_SPECIFICATIONS:
        return ((InternalEList<?>)getTestSpecifications()).basicRemove(otherEnd, msgs);
      case LTLPackage.PACKAGE__TESTING_METHODS:
        return ((InternalEList<?>)getTestingMethods()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LTLPackage.PACKAGE__NAME:
        return getName();
      case LTLPackage.PACKAGE__DESCRIPTION:
        return getDescription();
      case LTLPackage.PACKAGE__TESTINGS:
        return getTestings();
      case LTLPackage.PACKAGE__TESTABLE_ENTITIES:
        return getTestableEntities();
      case LTLPackage.PACKAGE__TEST_REQUIREMENTS:
        return getTestRequirements();
      case LTLPackage.PACKAGE__TEST_SPECIFICATIONS:
        return getTestSpecifications();
      case LTLPackage.PACKAGE__TESTING_METHODS:
        return getTestingMethods();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LTLPackage.PACKAGE__NAME:
        setName((String)newValue);
        return;
      case LTLPackage.PACKAGE__DESCRIPTION:
        setDescription((String)newValue);
        return;
      case LTLPackage.PACKAGE__TESTINGS:
        getTestings().clear();
        getTestings().addAll((Collection<? extends Testing>)newValue);
        return;
      case LTLPackage.PACKAGE__TESTABLE_ENTITIES:
        getTestableEntities().clear();
        getTestableEntities().addAll((Collection<? extends TestableEntity>)newValue);
        return;
      case LTLPackage.PACKAGE__TEST_REQUIREMENTS:
        getTestRequirements().clear();
        getTestRequirements().addAll((Collection<? extends TestRequirement>)newValue);
        return;
      case LTLPackage.PACKAGE__TEST_SPECIFICATIONS:
        getTestSpecifications().clear();
        getTestSpecifications().addAll((Collection<? extends TestSpecification>)newValue);
        return;
      case LTLPackage.PACKAGE__TESTING_METHODS:
        getTestingMethods().clear();
        getTestingMethods().addAll((Collection<? extends TestingMethod>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LTLPackage.PACKAGE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case LTLPackage.PACKAGE__DESCRIPTION:
        setDescription(DESCRIPTION_EDEFAULT);
        return;
      case LTLPackage.PACKAGE__TESTINGS:
        getTestings().clear();
        return;
      case LTLPackage.PACKAGE__TESTABLE_ENTITIES:
        getTestableEntities().clear();
        return;
      case LTLPackage.PACKAGE__TEST_REQUIREMENTS:
        getTestRequirements().clear();
        return;
      case LTLPackage.PACKAGE__TEST_SPECIFICATIONS:
        getTestSpecifications().clear();
        return;
      case LTLPackage.PACKAGE__TESTING_METHODS:
        getTestingMethods().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LTLPackage.PACKAGE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case LTLPackage.PACKAGE__DESCRIPTION:
        return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
      case LTLPackage.PACKAGE__TESTINGS:
        return testings != null && !testings.isEmpty();
      case LTLPackage.PACKAGE__TESTABLE_ENTITIES:
        return testableEntities != null && !testableEntities.isEmpty();
      case LTLPackage.PACKAGE__TEST_REQUIREMENTS:
        return testRequirements != null && !testRequirements.isEmpty();
      case LTLPackage.PACKAGE__TEST_SPECIFICATIONS:
        return testSpecifications != null && !testSpecifications.isEmpty();
      case LTLPackage.PACKAGE__TESTING_METHODS:
        return testingMethods != null && !testingMethods.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", description: ");
    result.append(description);
    result.append(')');
    return result.toString();
  }

} //PackageImpl
