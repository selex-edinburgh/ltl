/**
 * generated by Xtext 2.31.0
 */
package org.leonardo.ltl.lTL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.leonardo.ltl.lTL.LTLPackage;
import org.leonardo.ltl.lTL.TestRequirement;
import org.leonardo.ltl.lTL.TestableEntity;
import org.leonardo.ltl.lTL.Testing;
import org.leonardo.ltl.lTL.TestingActivity;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Testing</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.leonardo.ltl.lTL.impl.TestingImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.leonardo.ltl.lTL.impl.TestingImpl#getDescription <em>Description</em>}</li>
 *   <li>{@link org.leonardo.ltl.lTL.impl.TestingImpl#getActivities <em>Activities</em>}</li>
 *   <li>{@link org.leonardo.ltl.lTL.impl.TestingImpl#getRequirements <em>Requirements</em>}</li>
 *   <li>{@link org.leonardo.ltl.lTL.impl.TestingImpl#getEntities <em>Entities</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TestingImpl extends MinimalEObjectImpl.Container implements Testing
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected static final String DESCRIPTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected String description = DESCRIPTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getActivities() <em>Activities</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActivities()
   * @generated
   * @ordered
   */
  protected EList<TestingActivity> activities;

  /**
   * The cached value of the '{@link #getRequirements() <em>Requirements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRequirements()
   * @generated
   * @ordered
   */
  protected EList<TestRequirement> requirements;

  /**
   * The cached value of the '{@link #getEntities() <em>Entities</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEntities()
   * @generated
   * @ordered
   */
  protected EList<TestableEntity> entities;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TestingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LTLPackage.Literals.TESTING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LTLPackage.TESTING__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDescription()
  {
    return description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDescription(String newDescription)
  {
    String oldDescription = description;
    description = newDescription;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LTLPackage.TESTING__DESCRIPTION, oldDescription, description));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TestingActivity> getActivities()
  {
    if (activities == null)
    {
      activities = new EObjectContainmentEList<TestingActivity>(TestingActivity.class, this, LTLPackage.TESTING__ACTIVITIES);
    }
    return activities;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TestRequirement> getRequirements()
  {
    if (requirements == null)
    {
      requirements = new EObjectContainmentEList<TestRequirement>(TestRequirement.class, this, LTLPackage.TESTING__REQUIREMENTS);
    }
    return requirements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TestableEntity> getEntities()
  {
    if (entities == null)
    {
      entities = new EObjectContainmentEList<TestableEntity>(TestableEntity.class, this, LTLPackage.TESTING__ENTITIES);
    }
    return entities;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LTLPackage.TESTING__ACTIVITIES:
        return ((InternalEList<?>)getActivities()).basicRemove(otherEnd, msgs);
      case LTLPackage.TESTING__REQUIREMENTS:
        return ((InternalEList<?>)getRequirements()).basicRemove(otherEnd, msgs);
      case LTLPackage.TESTING__ENTITIES:
        return ((InternalEList<?>)getEntities()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LTLPackage.TESTING__NAME:
        return getName();
      case LTLPackage.TESTING__DESCRIPTION:
        return getDescription();
      case LTLPackage.TESTING__ACTIVITIES:
        return getActivities();
      case LTLPackage.TESTING__REQUIREMENTS:
        return getRequirements();
      case LTLPackage.TESTING__ENTITIES:
        return getEntities();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LTLPackage.TESTING__NAME:
        setName((String)newValue);
        return;
      case LTLPackage.TESTING__DESCRIPTION:
        setDescription((String)newValue);
        return;
      case LTLPackage.TESTING__ACTIVITIES:
        getActivities().clear();
        getActivities().addAll((Collection<? extends TestingActivity>)newValue);
        return;
      case LTLPackage.TESTING__REQUIREMENTS:
        getRequirements().clear();
        getRequirements().addAll((Collection<? extends TestRequirement>)newValue);
        return;
      case LTLPackage.TESTING__ENTITIES:
        getEntities().clear();
        getEntities().addAll((Collection<? extends TestableEntity>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LTLPackage.TESTING__NAME:
        setName(NAME_EDEFAULT);
        return;
      case LTLPackage.TESTING__DESCRIPTION:
        setDescription(DESCRIPTION_EDEFAULT);
        return;
      case LTLPackage.TESTING__ACTIVITIES:
        getActivities().clear();
        return;
      case LTLPackage.TESTING__REQUIREMENTS:
        getRequirements().clear();
        return;
      case LTLPackage.TESTING__ENTITIES:
        getEntities().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LTLPackage.TESTING__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case LTLPackage.TESTING__DESCRIPTION:
        return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
      case LTLPackage.TESTING__ACTIVITIES:
        return activities != null && !activities.isEmpty();
      case LTLPackage.TESTING__REQUIREMENTS:
        return requirements != null && !requirements.isEmpty();
      case LTLPackage.TESTING__ENTITIES:
        return entities != null && !entities.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", description: ");
    result.append(description);
    result.append(')');
    return result.toString();
  }

} //TestingImpl
