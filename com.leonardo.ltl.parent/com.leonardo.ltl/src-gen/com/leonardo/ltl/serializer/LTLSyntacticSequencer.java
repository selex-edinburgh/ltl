/*
 * generated by Xtext 2.31.0
 */
package com.leonardo.ltl.serializer;

import com.google.inject.Inject;
import com.leonardo.ltl.services.LTLGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class LTLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected LTLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_TestCase___EndKeyword_3_8_2___RequirementsKeyword_3_9_0_EndKeyword_3_9_2__a_EntitiesKeyword_3_8_0__a;
	protected AbstractElementAlias match_TestCase___EndKeyword_3_9_2___EntitiesKeyword_3_8_0_EndKeyword_3_8_2__a_RequirementsKeyword_3_9_0__a;
	protected AbstractElementAlias match_TestCase___EntitiesKeyword_3_8_0_EndKeyword_3_8_2___RequirementsKeyword_3_9_0_EndKeyword_3_9_2__a__a;
	protected AbstractElementAlias match_TestCase___EntitiesKeyword_3_8_0_EndKeyword_3_8_2__a;
	protected AbstractElementAlias match_TestCase___RequirementsKeyword_3_9_0_EndKeyword_3_9_2___EntitiesKeyword_3_8_0_EndKeyword_3_8_2__a__a;
	protected AbstractElementAlias match_TestCase___RequirementsKeyword_3_9_0_EndKeyword_3_9_2__a;
	protected AbstractElementAlias match_TestCase_____EntitiesKeyword_3_8_0_EndKeyword_3_8_2___or___RequirementsKeyword_3_9_0_EndKeyword_3_9_2____a;
	protected AbstractElementAlias match_TestCase_____EntitiesKeyword_3_8_0_EndKeyword_3_8_2__q___EntitiesKeyword_3_8_0_EndKeyword_3_8_2_RequirementsKeyword_3_9_0_EndKeyword_3_9_2__q__p;
	protected AbstractElementAlias match_TestCase_____RequirementsKeyword_3_9_0_EndKeyword_3_9_2__q___RequirementsKeyword_3_9_0_EndKeyword_3_9_2_EntitiesKeyword_3_8_0_EndKeyword_3_8_2__q__p;
	protected AbstractElementAlias match_TestExecution___EndKeyword_2_2_2_SpecificationKeyword_2_2_0__a;
	protected AbstractElementAlias match_TestExecution___SpecificationKeyword_2_2_0_EndKeyword_2_2_2__a;
	protected AbstractElementAlias match_TestSuite___CasesKeyword_3_3_0_EndKeyword_3_3_2__a;
	protected AbstractElementAlias match_TestSuite___EndKeyword_3_3_2_CasesKeyword_3_3_0__a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (LTLGrammarAccess) access;
		match_TestCase___EndKeyword_3_8_2___RequirementsKeyword_3_9_0_EndKeyword_3_9_2__a_EntitiesKeyword_3_8_0__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEndKeyword_3_8_2()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getRequirementsKeyword_3_9_0()), new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEndKeyword_3_9_2())), new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEntitiesKeyword_3_8_0()));
		match_TestCase___EndKeyword_3_9_2___EntitiesKeyword_3_8_0_EndKeyword_3_8_2__a_RequirementsKeyword_3_9_0__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEndKeyword_3_9_2()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEntitiesKeyword_3_8_0()), new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEndKeyword_3_8_2())), new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getRequirementsKeyword_3_9_0()));
		match_TestCase___EntitiesKeyword_3_8_0_EndKeyword_3_8_2___RequirementsKeyword_3_9_0_EndKeyword_3_9_2__a__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEntitiesKeyword_3_8_0()), new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEndKeyword_3_8_2()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getRequirementsKeyword_3_9_0()), new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEndKeyword_3_9_2())));
		match_TestCase___EntitiesKeyword_3_8_0_EndKeyword_3_8_2__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEntitiesKeyword_3_8_0()), new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEndKeyword_3_8_2()));
		match_TestCase___RequirementsKeyword_3_9_0_EndKeyword_3_9_2___EntitiesKeyword_3_8_0_EndKeyword_3_8_2__a__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getRequirementsKeyword_3_9_0()), new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEndKeyword_3_9_2()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEntitiesKeyword_3_8_0()), new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEndKeyword_3_8_2())));
		match_TestCase___RequirementsKeyword_3_9_0_EndKeyword_3_9_2__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getRequirementsKeyword_3_9_0()), new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEndKeyword_3_9_2()));
		match_TestCase_____EntitiesKeyword_3_8_0_EndKeyword_3_8_2___or___RequirementsKeyword_3_9_0_EndKeyword_3_9_2____a = new AlternativeAlias(true, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEntitiesKeyword_3_8_0()), new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEndKeyword_3_8_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getRequirementsKeyword_3_9_0()), new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEndKeyword_3_9_2())));
		match_TestCase_____EntitiesKeyword_3_8_0_EndKeyword_3_8_2__q___EntitiesKeyword_3_8_0_EndKeyword_3_8_2_RequirementsKeyword_3_9_0_EndKeyword_3_9_2__q__p = new GroupAlias(true, false, new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEntitiesKeyword_3_8_0()), new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEndKeyword_3_8_2())), new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEntitiesKeyword_3_8_0()), new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEndKeyword_3_8_2()), new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getRequirementsKeyword_3_9_0()), new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEndKeyword_3_9_2())));
		match_TestCase_____RequirementsKeyword_3_9_0_EndKeyword_3_9_2__q___RequirementsKeyword_3_9_0_EndKeyword_3_9_2_EntitiesKeyword_3_8_0_EndKeyword_3_8_2__q__p = new GroupAlias(true, false, new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getRequirementsKeyword_3_9_0()), new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEndKeyword_3_9_2())), new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getRequirementsKeyword_3_9_0()), new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEndKeyword_3_9_2()), new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEntitiesKeyword_3_8_0()), new TokenAlias(false, false, grammarAccess.getTestCaseAccess().getEndKeyword_3_8_2())));
		match_TestExecution___EndKeyword_2_2_2_SpecificationKeyword_2_2_0__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getTestExecutionAccess().getEndKeyword_2_2_2()), new TokenAlias(false, false, grammarAccess.getTestExecutionAccess().getSpecificationKeyword_2_2_0()));
		match_TestExecution___SpecificationKeyword_2_2_0_EndKeyword_2_2_2__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getTestExecutionAccess().getSpecificationKeyword_2_2_0()), new TokenAlias(false, false, grammarAccess.getTestExecutionAccess().getEndKeyword_2_2_2()));
		match_TestSuite___CasesKeyword_3_3_0_EndKeyword_3_3_2__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getTestSuiteAccess().getCasesKeyword_3_3_0()), new TokenAlias(false, false, grammarAccess.getTestSuiteAccess().getEndKeyword_3_3_2()));
		match_TestSuite___EndKeyword_3_3_2_CasesKeyword_3_3_0__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getTestSuiteAccess().getEndKeyword_3_3_2()), new TokenAlias(false, false, grammarAccess.getTestSuiteAccess().getCasesKeyword_3_3_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_TestCase___EndKeyword_3_8_2___RequirementsKeyword_3_9_0_EndKeyword_3_9_2__a_EntitiesKeyword_3_8_0__a.equals(syntax))
				emit_TestCase___EndKeyword_3_8_2___RequirementsKeyword_3_9_0_EndKeyword_3_9_2__a_EntitiesKeyword_3_8_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TestCase___EndKeyword_3_9_2___EntitiesKeyword_3_8_0_EndKeyword_3_8_2__a_RequirementsKeyword_3_9_0__a.equals(syntax))
				emit_TestCase___EndKeyword_3_9_2___EntitiesKeyword_3_8_0_EndKeyword_3_8_2__a_RequirementsKeyword_3_9_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TestCase___EntitiesKeyword_3_8_0_EndKeyword_3_8_2___RequirementsKeyword_3_9_0_EndKeyword_3_9_2__a__a.equals(syntax))
				emit_TestCase___EntitiesKeyword_3_8_0_EndKeyword_3_8_2___RequirementsKeyword_3_9_0_EndKeyword_3_9_2__a__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TestCase___EntitiesKeyword_3_8_0_EndKeyword_3_8_2__a.equals(syntax))
				emit_TestCase___EntitiesKeyword_3_8_0_EndKeyword_3_8_2__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TestCase___RequirementsKeyword_3_9_0_EndKeyword_3_9_2___EntitiesKeyword_3_8_0_EndKeyword_3_8_2__a__a.equals(syntax))
				emit_TestCase___RequirementsKeyword_3_9_0_EndKeyword_3_9_2___EntitiesKeyword_3_8_0_EndKeyword_3_8_2__a__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TestCase___RequirementsKeyword_3_9_0_EndKeyword_3_9_2__a.equals(syntax))
				emit_TestCase___RequirementsKeyword_3_9_0_EndKeyword_3_9_2__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TestCase_____EntitiesKeyword_3_8_0_EndKeyword_3_8_2___or___RequirementsKeyword_3_9_0_EndKeyword_3_9_2____a.equals(syntax))
				emit_TestCase_____EntitiesKeyword_3_8_0_EndKeyword_3_8_2___or___RequirementsKeyword_3_9_0_EndKeyword_3_9_2____a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TestCase_____EntitiesKeyword_3_8_0_EndKeyword_3_8_2__q___EntitiesKeyword_3_8_0_EndKeyword_3_8_2_RequirementsKeyword_3_9_0_EndKeyword_3_9_2__q__p.equals(syntax))
				emit_TestCase_____EntitiesKeyword_3_8_0_EndKeyword_3_8_2__q___EntitiesKeyword_3_8_0_EndKeyword_3_8_2_RequirementsKeyword_3_9_0_EndKeyword_3_9_2__q__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TestCase_____RequirementsKeyword_3_9_0_EndKeyword_3_9_2__q___RequirementsKeyword_3_9_0_EndKeyword_3_9_2_EntitiesKeyword_3_8_0_EndKeyword_3_8_2__q__p.equals(syntax))
				emit_TestCase_____RequirementsKeyword_3_9_0_EndKeyword_3_9_2__q___RequirementsKeyword_3_9_0_EndKeyword_3_9_2_EntitiesKeyword_3_8_0_EndKeyword_3_8_2__q__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TestExecution___EndKeyword_2_2_2_SpecificationKeyword_2_2_0__a.equals(syntax))
				emit_TestExecution___EndKeyword_2_2_2_SpecificationKeyword_2_2_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TestExecution___SpecificationKeyword_2_2_0_EndKeyword_2_2_2__a.equals(syntax))
				emit_TestExecution___SpecificationKeyword_2_2_0_EndKeyword_2_2_2__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TestSuite___CasesKeyword_3_3_0_EndKeyword_3_3_2__a.equals(syntax))
				emit_TestSuite___CasesKeyword_3_3_0_EndKeyword_3_3_2__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TestSuite___EndKeyword_3_3_2_CasesKeyword_3_3_0__a.equals(syntax))
				emit_TestSuite___EndKeyword_3_3_2_CasesKeyword_3_3_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('end' ('requirements' 'end')* 'entities')*
	 *
	 * This ambiguous syntax occurs at:
	 *     date=STRING ('requirements' 'end')* 'entities' (ambiguity) tests+=[TestableEntity|QualifiedName]
	 *     description=STRING ('requirements' 'end')* 'entities' (ambiguity) tests+=[TestableEntity|QualifiedName]
	 *     expectedResult=STRING ('requirements' 'end')* 'entities' (ambiguity) tests+=[TestableEntity|QualifiedName]
	 *     inputs+=STRING ('requirements' 'end')* 'entities' (ambiguity) tests+=[TestableEntity|QualifiedName]
	 *     name=QualifiedName ('requirements' 'end')* 'entities' (ambiguity) tests+=[TestableEntity|QualifiedName]
	 *     postcondition=STRING ('requirements' 'end')* 'entities' (ambiguity) tests+=[TestableEntity|QualifiedName]
	 *     precondition=STRING ('requirements' 'end')* 'entities' (ambiguity) tests+=[TestableEntity|QualifiedName]
	 *     testingMethod=STRING ('requirements' 'end')* 'entities' (ambiguity) tests+=[TestableEntity|QualifiedName]
	 *     tests+=[TestableEntity|QualifiedName] (ambiguity) tests+=[TestableEntity|QualifiedName]
	 *     version=STRING ('requirements' 'end')* 'entities' (ambiguity) tests+=[TestableEntity|QualifiedName]
	 
	 * </pre>
	 */
	protected void emit_TestCase___EndKeyword_3_8_2___RequirementsKeyword_3_9_0_EndKeyword_3_9_2__a_EntitiesKeyword_3_8_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('end' ('entities' 'end')* 'requirements')*
	 *
	 * This ambiguous syntax occurs at:
	 *     date=STRING ('entities' 'end')* 'requirements' (ambiguity) demonstratesSatisfactionOf+=[TestRequirement|QualifiedName]
	 *     demonstratesSatisfactionOf+=[TestRequirement|QualifiedName] (ambiguity) demonstratesSatisfactionOf+=[TestRequirement|QualifiedName]
	 *     description=STRING ('entities' 'end')* 'requirements' (ambiguity) demonstratesSatisfactionOf+=[TestRequirement|QualifiedName]
	 *     expectedResult=STRING ('entities' 'end')* 'requirements' (ambiguity) demonstratesSatisfactionOf+=[TestRequirement|QualifiedName]
	 *     inputs+=STRING ('entities' 'end')* 'requirements' (ambiguity) demonstratesSatisfactionOf+=[TestRequirement|QualifiedName]
	 *     name=QualifiedName ('entities' 'end')* 'requirements' (ambiguity) demonstratesSatisfactionOf+=[TestRequirement|QualifiedName]
	 *     postcondition=STRING ('entities' 'end')* 'requirements' (ambiguity) demonstratesSatisfactionOf+=[TestRequirement|QualifiedName]
	 *     precondition=STRING ('entities' 'end')* 'requirements' (ambiguity) demonstratesSatisfactionOf+=[TestRequirement|QualifiedName]
	 *     testingMethod=STRING ('entities' 'end')* 'requirements' (ambiguity) demonstratesSatisfactionOf+=[TestRequirement|QualifiedName]
	 *     version=STRING ('entities' 'end')* 'requirements' (ambiguity) demonstratesSatisfactionOf+=[TestRequirement|QualifiedName]
	 
	 * </pre>
	 */
	protected void emit_TestCase___EndKeyword_3_9_2___EntitiesKeyword_3_8_0_EndKeyword_3_8_2__a_RequirementsKeyword_3_9_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('entities' 'end' ('requirements' 'end')*)*
	 *
	 * This ambiguous syntax occurs at:
	 *     tests+=[TestableEntity|QualifiedName] 'end' ('requirements' 'end')* (ambiguity) 'date' date=STRING
	 *     tests+=[TestableEntity|QualifiedName] 'end' ('requirements' 'end')* (ambiguity) 'description' description=STRING
	 *     tests+=[TestableEntity|QualifiedName] 'end' ('requirements' 'end')* (ambiguity) 'end' (rule end)
	 *     tests+=[TestableEntity|QualifiedName] 'end' ('requirements' 'end')* (ambiguity) 'expectedResult' expectedResult=STRING
	 *     tests+=[TestableEntity|QualifiedName] 'end' ('requirements' 'end')* (ambiguity) 'inputs' inputs+=STRING
	 *     tests+=[TestableEntity|QualifiedName] 'end' ('requirements' 'end')* (ambiguity) 'method' testingMethod=STRING
	 *     tests+=[TestableEntity|QualifiedName] 'end' ('requirements' 'end')* (ambiguity) 'postcondition' postcondition=STRING
	 *     tests+=[TestableEntity|QualifiedName] 'end' ('requirements' 'end')* (ambiguity) 'precondition' precondition=STRING
	 *     tests+=[TestableEntity|QualifiedName] 'end' ('requirements' 'end')* (ambiguity) 'version' version=STRING
	 
	 * </pre>
	 */
	protected void emit_TestCase___EntitiesKeyword_3_8_0_EndKeyword_3_8_2___RequirementsKeyword_3_9_0_EndKeyword_3_9_2__a__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('entities' 'end')*
	 *
	 * This ambiguous syntax occurs at:
	 *     date=STRING (ambiguity) 'requirements' ('end' (ambiguity) 'requirements')* demonstratesSatisfactionOf+=[TestRequirement|QualifiedName]
	 *     demonstratesSatisfactionOf+=[TestRequirement|QualifiedName] 'end' (ambiguity) ('requirements' 'end' (ambiguity))* 'date' date=STRING
	 *     demonstratesSatisfactionOf+=[TestRequirement|QualifiedName] 'end' (ambiguity) ('requirements' 'end' (ambiguity))* 'description' description=STRING
	 *     demonstratesSatisfactionOf+=[TestRequirement|QualifiedName] 'end' (ambiguity) ('requirements' 'end' (ambiguity))* 'end' (rule end)
	 *     demonstratesSatisfactionOf+=[TestRequirement|QualifiedName] 'end' (ambiguity) ('requirements' 'end' (ambiguity))* 'expectedResult' expectedResult=STRING
	 *     demonstratesSatisfactionOf+=[TestRequirement|QualifiedName] 'end' (ambiguity) ('requirements' 'end' (ambiguity))* 'inputs' inputs+=STRING
	 *     demonstratesSatisfactionOf+=[TestRequirement|QualifiedName] 'end' (ambiguity) ('requirements' 'end' (ambiguity))* 'method' testingMethod=STRING
	 *     demonstratesSatisfactionOf+=[TestRequirement|QualifiedName] 'end' (ambiguity) ('requirements' 'end' (ambiguity))* 'postcondition' postcondition=STRING
	 *     demonstratesSatisfactionOf+=[TestRequirement|QualifiedName] 'end' (ambiguity) ('requirements' 'end' (ambiguity))* 'precondition' precondition=STRING
	 *     demonstratesSatisfactionOf+=[TestRequirement|QualifiedName] 'end' (ambiguity) ('requirements' 'end' (ambiguity))* 'version' version=STRING
	 *     description=STRING (ambiguity) 'requirements' ('end' (ambiguity) 'requirements')* demonstratesSatisfactionOf+=[TestRequirement|QualifiedName]
	 *     expectedResult=STRING (ambiguity) 'requirements' ('end' (ambiguity) 'requirements')* demonstratesSatisfactionOf+=[TestRequirement|QualifiedName]
	 *     inputs+=STRING (ambiguity) 'requirements' ('end' (ambiguity) 'requirements')* demonstratesSatisfactionOf+=[TestRequirement|QualifiedName]
	 *     name=QualifiedName (ambiguity) 'requirements' ('end' (ambiguity) 'requirements')* demonstratesSatisfactionOf+=[TestRequirement|QualifiedName]
	 *     postcondition=STRING (ambiguity) 'requirements' ('end' (ambiguity) 'requirements')* demonstratesSatisfactionOf+=[TestRequirement|QualifiedName]
	 *     precondition=STRING (ambiguity) 'requirements' ('end' (ambiguity) 'requirements')* demonstratesSatisfactionOf+=[TestRequirement|QualifiedName]
	 *     testingMethod=STRING (ambiguity) 'requirements' ('end' (ambiguity) 'requirements')* demonstratesSatisfactionOf+=[TestRequirement|QualifiedName]
	 *     tests+=[TestableEntity|QualifiedName] 'end' (ambiguity) (('requirements' 'end')? ('requirements' 'end' 'entities' 'end')?)+ 'requirements' demonstratesSatisfactionOf+=[TestRequirement|QualifiedName]
	 *     version=STRING (ambiguity) 'requirements' ('end' (ambiguity) 'requirements')* demonstratesSatisfactionOf+=[TestRequirement|QualifiedName]
	 
	 * </pre>
	 */
	protected void emit_TestCase___EntitiesKeyword_3_8_0_EndKeyword_3_8_2__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('requirements' 'end' ('entities' 'end')*)*
	 *
	 * This ambiguous syntax occurs at:
	 *     demonstratesSatisfactionOf+=[TestRequirement|QualifiedName] 'end' ('entities' 'end')* (ambiguity) 'date' date=STRING
	 *     demonstratesSatisfactionOf+=[TestRequirement|QualifiedName] 'end' ('entities' 'end')* (ambiguity) 'description' description=STRING
	 *     demonstratesSatisfactionOf+=[TestRequirement|QualifiedName] 'end' ('entities' 'end')* (ambiguity) 'end' (rule end)
	 *     demonstratesSatisfactionOf+=[TestRequirement|QualifiedName] 'end' ('entities' 'end')* (ambiguity) 'expectedResult' expectedResult=STRING
	 *     demonstratesSatisfactionOf+=[TestRequirement|QualifiedName] 'end' ('entities' 'end')* (ambiguity) 'inputs' inputs+=STRING
	 *     demonstratesSatisfactionOf+=[TestRequirement|QualifiedName] 'end' ('entities' 'end')* (ambiguity) 'method' testingMethod=STRING
	 *     demonstratesSatisfactionOf+=[TestRequirement|QualifiedName] 'end' ('entities' 'end')* (ambiguity) 'postcondition' postcondition=STRING
	 *     demonstratesSatisfactionOf+=[TestRequirement|QualifiedName] 'end' ('entities' 'end')* (ambiguity) 'precondition' precondition=STRING
	 *     demonstratesSatisfactionOf+=[TestRequirement|QualifiedName] 'end' ('entities' 'end')* (ambiguity) 'version' version=STRING
	 
	 * </pre>
	 */
	protected void emit_TestCase___RequirementsKeyword_3_9_0_EndKeyword_3_9_2___EntitiesKeyword_3_8_0_EndKeyword_3_8_2__a__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('requirements' 'end')*
	 *
	 * This ambiguous syntax occurs at:
	 *     date=STRING (ambiguity) 'entities' ('end' (ambiguity) 'entities')* tests+=[TestableEntity|QualifiedName]
	 *     demonstratesSatisfactionOf+=[TestRequirement|QualifiedName] 'end' (ambiguity) (('entities' 'end')? ('entities' 'end' 'requirements' 'end')?)+ 'entities' tests+=[TestableEntity|QualifiedName]
	 *     description=STRING (ambiguity) 'entities' ('end' (ambiguity) 'entities')* tests+=[TestableEntity|QualifiedName]
	 *     expectedResult=STRING (ambiguity) 'entities' ('end' (ambiguity) 'entities')* tests+=[TestableEntity|QualifiedName]
	 *     inputs+=STRING (ambiguity) 'entities' ('end' (ambiguity) 'entities')* tests+=[TestableEntity|QualifiedName]
	 *     name=QualifiedName (ambiguity) 'entities' ('end' (ambiguity) 'entities')* tests+=[TestableEntity|QualifiedName]
	 *     postcondition=STRING (ambiguity) 'entities' ('end' (ambiguity) 'entities')* tests+=[TestableEntity|QualifiedName]
	 *     precondition=STRING (ambiguity) 'entities' ('end' (ambiguity) 'entities')* tests+=[TestableEntity|QualifiedName]
	 *     testingMethod=STRING (ambiguity) 'entities' ('end' (ambiguity) 'entities')* tests+=[TestableEntity|QualifiedName]
	 *     tests+=[TestableEntity|QualifiedName] 'end' (ambiguity) ('entities' 'end' (ambiguity))* 'date' date=STRING
	 *     tests+=[TestableEntity|QualifiedName] 'end' (ambiguity) ('entities' 'end' (ambiguity))* 'description' description=STRING
	 *     tests+=[TestableEntity|QualifiedName] 'end' (ambiguity) ('entities' 'end' (ambiguity))* 'end' (rule end)
	 *     tests+=[TestableEntity|QualifiedName] 'end' (ambiguity) ('entities' 'end' (ambiguity))* 'expectedResult' expectedResult=STRING
	 *     tests+=[TestableEntity|QualifiedName] 'end' (ambiguity) ('entities' 'end' (ambiguity))* 'inputs' inputs+=STRING
	 *     tests+=[TestableEntity|QualifiedName] 'end' (ambiguity) ('entities' 'end' (ambiguity))* 'method' testingMethod=STRING
	 *     tests+=[TestableEntity|QualifiedName] 'end' (ambiguity) ('entities' 'end' (ambiguity))* 'postcondition' postcondition=STRING
	 *     tests+=[TestableEntity|QualifiedName] 'end' (ambiguity) ('entities' 'end' (ambiguity))* 'precondition' precondition=STRING
	 *     tests+=[TestableEntity|QualifiedName] 'end' (ambiguity) ('entities' 'end' (ambiguity))* 'version' version=STRING
	 *     version=STRING (ambiguity) 'entities' ('end' (ambiguity) 'entities')* tests+=[TestableEntity|QualifiedName]
	 
	 * </pre>
	 */
	protected void emit_TestCase___RequirementsKeyword_3_9_0_EndKeyword_3_9_2__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (('entities' 'end') | ('requirements' 'end'))*
	 *
	 * This ambiguous syntax occurs at:
	 *     date=STRING (ambiguity) 'date' date=STRING
	 *     date=STRING (ambiguity) 'description' description=STRING
	 *     date=STRING (ambiguity) 'end' (rule end)
	 *     date=STRING (ambiguity) 'expectedResult' expectedResult=STRING
	 *     date=STRING (ambiguity) 'inputs' inputs+=STRING
	 *     date=STRING (ambiguity) 'method' testingMethod=STRING
	 *     date=STRING (ambiguity) 'postcondition' postcondition=STRING
	 *     date=STRING (ambiguity) 'precondition' precondition=STRING
	 *     date=STRING (ambiguity) 'version' version=STRING
	 *     description=STRING (ambiguity) 'date' date=STRING
	 *     description=STRING (ambiguity) 'description' description=STRING
	 *     description=STRING (ambiguity) 'end' (rule end)
	 *     description=STRING (ambiguity) 'expectedResult' expectedResult=STRING
	 *     description=STRING (ambiguity) 'inputs' inputs+=STRING
	 *     description=STRING (ambiguity) 'method' testingMethod=STRING
	 *     description=STRING (ambiguity) 'postcondition' postcondition=STRING
	 *     description=STRING (ambiguity) 'precondition' precondition=STRING
	 *     description=STRING (ambiguity) 'version' version=STRING
	 *     expectedResult=STRING (ambiguity) 'date' date=STRING
	 *     expectedResult=STRING (ambiguity) 'description' description=STRING
	 *     expectedResult=STRING (ambiguity) 'end' (rule end)
	 *     expectedResult=STRING (ambiguity) 'expectedResult' expectedResult=STRING
	 *     expectedResult=STRING (ambiguity) 'inputs' inputs+=STRING
	 *     expectedResult=STRING (ambiguity) 'method' testingMethod=STRING
	 *     expectedResult=STRING (ambiguity) 'postcondition' postcondition=STRING
	 *     expectedResult=STRING (ambiguity) 'precondition' precondition=STRING
	 *     expectedResult=STRING (ambiguity) 'version' version=STRING
	 *     inputs+=STRING (ambiguity) 'date' date=STRING
	 *     inputs+=STRING (ambiguity) 'description' description=STRING
	 *     inputs+=STRING (ambiguity) 'end' (rule end)
	 *     inputs+=STRING (ambiguity) 'expectedResult' expectedResult=STRING
	 *     inputs+=STRING (ambiguity) 'inputs' inputs+=STRING
	 *     inputs+=STRING (ambiguity) 'method' testingMethod=STRING
	 *     inputs+=STRING (ambiguity) 'postcondition' postcondition=STRING
	 *     inputs+=STRING (ambiguity) 'precondition' precondition=STRING
	 *     inputs+=STRING (ambiguity) 'version' version=STRING
	 *     name=QualifiedName (ambiguity) 'date' date=STRING
	 *     name=QualifiedName (ambiguity) 'description' description=STRING
	 *     name=QualifiedName (ambiguity) 'end' (rule end)
	 *     name=QualifiedName (ambiguity) 'expectedResult' expectedResult=STRING
	 *     name=QualifiedName (ambiguity) 'inputs' inputs+=STRING
	 *     name=QualifiedName (ambiguity) 'method' testingMethod=STRING
	 *     name=QualifiedName (ambiguity) 'postcondition' postcondition=STRING
	 *     name=QualifiedName (ambiguity) 'precondition' precondition=STRING
	 *     name=QualifiedName (ambiguity) 'version' version=STRING
	 *     postcondition=STRING (ambiguity) 'date' date=STRING
	 *     postcondition=STRING (ambiguity) 'description' description=STRING
	 *     postcondition=STRING (ambiguity) 'end' (rule end)
	 *     postcondition=STRING (ambiguity) 'expectedResult' expectedResult=STRING
	 *     postcondition=STRING (ambiguity) 'inputs' inputs+=STRING
	 *     postcondition=STRING (ambiguity) 'method' testingMethod=STRING
	 *     postcondition=STRING (ambiguity) 'postcondition' postcondition=STRING
	 *     postcondition=STRING (ambiguity) 'precondition' precondition=STRING
	 *     postcondition=STRING (ambiguity) 'version' version=STRING
	 *     precondition=STRING (ambiguity) 'date' date=STRING
	 *     precondition=STRING (ambiguity) 'description' description=STRING
	 *     precondition=STRING (ambiguity) 'end' (rule end)
	 *     precondition=STRING (ambiguity) 'expectedResult' expectedResult=STRING
	 *     precondition=STRING (ambiguity) 'inputs' inputs+=STRING
	 *     precondition=STRING (ambiguity) 'method' testingMethod=STRING
	 *     precondition=STRING (ambiguity) 'postcondition' postcondition=STRING
	 *     precondition=STRING (ambiguity) 'precondition' precondition=STRING
	 *     precondition=STRING (ambiguity) 'version' version=STRING
	 *     testingMethod=STRING (ambiguity) 'date' date=STRING
	 *     testingMethod=STRING (ambiguity) 'description' description=STRING
	 *     testingMethod=STRING (ambiguity) 'end' (rule end)
	 *     testingMethod=STRING (ambiguity) 'expectedResult' expectedResult=STRING
	 *     testingMethod=STRING (ambiguity) 'inputs' inputs+=STRING
	 *     testingMethod=STRING (ambiguity) 'method' testingMethod=STRING
	 *     testingMethod=STRING (ambiguity) 'postcondition' postcondition=STRING
	 *     testingMethod=STRING (ambiguity) 'precondition' precondition=STRING
	 *     testingMethod=STRING (ambiguity) 'version' version=STRING
	 *     version=STRING (ambiguity) 'date' date=STRING
	 *     version=STRING (ambiguity) 'description' description=STRING
	 *     version=STRING (ambiguity) 'end' (rule end)
	 *     version=STRING (ambiguity) 'expectedResult' expectedResult=STRING
	 *     version=STRING (ambiguity) 'inputs' inputs+=STRING
	 *     version=STRING (ambiguity) 'method' testingMethod=STRING
	 *     version=STRING (ambiguity) 'postcondition' postcondition=STRING
	 *     version=STRING (ambiguity) 'precondition' precondition=STRING
	 *     version=STRING (ambiguity) 'version' version=STRING
	 
	 * </pre>
	 */
	protected void emit_TestCase_____EntitiesKeyword_3_8_0_EndKeyword_3_8_2___or___RequirementsKeyword_3_9_0_EndKeyword_3_9_2____a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (('entities' 'end')? ('entities' 'end' 'requirements' 'end')?)+
	 *
	 * This ambiguous syntax occurs at:
	 *     demonstratesSatisfactionOf+=[TestRequirement|QualifiedName] 'end' ('requirements' 'end')* (ambiguity) 'entities' tests+=[TestableEntity|QualifiedName]
	 
	 * </pre>
	 */
	protected void emit_TestCase_____EntitiesKeyword_3_8_0_EndKeyword_3_8_2__q___EntitiesKeyword_3_8_0_EndKeyword_3_8_2_RequirementsKeyword_3_9_0_EndKeyword_3_9_2__q__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (('requirements' 'end')? ('requirements' 'end' 'entities' 'end')?)+
	 *
	 * This ambiguous syntax occurs at:
	 *     tests+=[TestableEntity|QualifiedName] 'end' ('entities' 'end')* (ambiguity) 'requirements' demonstratesSatisfactionOf+=[TestRequirement|QualifiedName]
	 
	 * </pre>
	 */
	protected void emit_TestCase_____RequirementsKeyword_3_9_0_EndKeyword_3_9_2__q___RequirementsKeyword_3_9_0_EndKeyword_3_9_2_EntitiesKeyword_3_8_0_EndKeyword_3_8_2__q__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('end' 'specification')*
	 *
	 * This ambiguous syntax occurs at:
	 *     date=STRING 'specification' (ambiguity) testSpecifications+=[TestSpecification|QualifiedName]
	 *     description=STRING 'specification' (ambiguity) testSpecifications+=[TestSpecification|QualifiedName]
	 *     name=QualifiedName 'specification' (ambiguity) testSpecifications+=[TestSpecification|QualifiedName]
	 *     testSpecifications+=[TestSpecification|QualifiedName] (ambiguity) testSpecifications+=[TestSpecification|QualifiedName]
	 
	 * </pre>
	 */
	protected void emit_TestExecution___EndKeyword_2_2_2_SpecificationKeyword_2_2_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('specification' 'end')*
	 *
	 * This ambiguous syntax occurs at:
	 *     date=STRING (ambiguity) 'date' date=STRING
	 *     date=STRING (ambiguity) 'description' description=STRING
	 *     date=STRING (ambiguity) 'end' (rule end)
	 *     description=STRING (ambiguity) 'date' date=STRING
	 *     description=STRING (ambiguity) 'description' description=STRING
	 *     description=STRING (ambiguity) 'end' (rule end)
	 *     name=QualifiedName (ambiguity) 'date' date=STRING
	 *     name=QualifiedName (ambiguity) 'description' description=STRING
	 *     name=QualifiedName (ambiguity) 'end' (rule end)
	 *     testSpecifications+=[TestSpecification|QualifiedName] 'end' (ambiguity) 'date' date=STRING
	 *     testSpecifications+=[TestSpecification|QualifiedName] 'end' (ambiguity) 'description' description=STRING
	 *     testSpecifications+=[TestSpecification|QualifiedName] 'end' (ambiguity) 'end' (rule end)
	 
	 * </pre>
	 */
	protected void emit_TestExecution___SpecificationKeyword_2_2_0_EndKeyword_2_2_2__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('cases' 'end')*
	 *
	 * This ambiguous syntax occurs at:
	 *     date=STRING (ambiguity) 'date' date=STRING
	 *     date=STRING (ambiguity) 'description' description=STRING
	 *     date=STRING (ambiguity) 'end' (rule end)
	 *     date=STRING (ambiguity) 'version' version=STRING
	 *     description=STRING (ambiguity) 'date' date=STRING
	 *     description=STRING (ambiguity) 'description' description=STRING
	 *     description=STRING (ambiguity) 'end' (rule end)
	 *     description=STRING (ambiguity) 'version' version=STRING
	 *     name=QualifiedName (ambiguity) 'date' date=STRING
	 *     name=QualifiedName (ambiguity) 'description' description=STRING
	 *     name=QualifiedName (ambiguity) 'end' (rule end)
	 *     name=QualifiedName (ambiguity) 'version' version=STRING
	 *     testSpecifications+=[TestSpecification|QualifiedName] 'end' (ambiguity) 'date' date=STRING
	 *     testSpecifications+=[TestSpecification|QualifiedName] 'end' (ambiguity) 'description' description=STRING
	 *     testSpecifications+=[TestSpecification|QualifiedName] 'end' (ambiguity) 'end' (rule end)
	 *     testSpecifications+=[TestSpecification|QualifiedName] 'end' (ambiguity) 'version' version=STRING
	 *     version=STRING (ambiguity) 'date' date=STRING
	 *     version=STRING (ambiguity) 'description' description=STRING
	 *     version=STRING (ambiguity) 'end' (rule end)
	 *     version=STRING (ambiguity) 'version' version=STRING
	 
	 * </pre>
	 */
	protected void emit_TestSuite___CasesKeyword_3_3_0_EndKeyword_3_3_2__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('end' 'cases')*
	 *
	 * This ambiguous syntax occurs at:
	 *     date=STRING 'cases' (ambiguity) testSpecifications+=[TestSpecification|QualifiedName]
	 *     description=STRING 'cases' (ambiguity) testSpecifications+=[TestSpecification|QualifiedName]
	 *     name=QualifiedName 'cases' (ambiguity) testSpecifications+=[TestSpecification|QualifiedName]
	 *     testSpecifications+=[TestSpecification|QualifiedName] (ambiguity) testSpecifications+=[TestSpecification|QualifiedName]
	 *     version=STRING 'cases' (ambiguity) testSpecifications+=[TestSpecification|QualifiedName]
	 
	 * </pre>
	 */
	protected void emit_TestSuite___EndKeyword_3_3_2_CasesKeyword_3_3_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
