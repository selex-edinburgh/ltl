/*
 * generated by Xtext 2.31.0
 */
package com.leonardo.ltl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.leonardo.ltl.ide.contentassist.antlr.internal.InternalLTLParser;
import com.leonardo.ltl.services.LTLGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class LTLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(LTLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, LTLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getPackagableElementAccess().getAlternatives(), "rule__PackagableElement__Alternatives");
			builder.put(grammarAccess.getTestSpecificationAccess().getAlternatives(), "rule__TestSpecification__Alternatives");
			builder.put(grammarAccess.getBooleanAccess().getAlternatives(), "rule__Boolean__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
			builder.put(grammarAccess.getPackageAccess().getGroup_2_0(), "rule__Package__Group_2_0__0");
			builder.put(grammarAccess.getTestableEntityAccess().getGroup(), "rule__TestableEntity__Group__0");
			builder.put(grammarAccess.getTestableEntityAccess().getGroup_3_0(), "rule__TestableEntity__Group_3_0__0");
			builder.put(grammarAccess.getTestableEntityAccess().getGroup_3_1(), "rule__TestableEntity__Group_3_1__0");
			builder.put(grammarAccess.getTestRequirementAccess().getGroup(), "rule__TestRequirement__Group__0");
			builder.put(grammarAccess.getTestRequirementAccess().getGroup_3_0(), "rule__TestRequirement__Group_3_0__0");
			builder.put(grammarAccess.getTestRequirementAccess().getGroup_3_1(), "rule__TestRequirement__Group_3_1__0");
			builder.put(grammarAccess.getTestRequirementAccess().getGroup_3_2(), "rule__TestRequirement__Group_3_2__0");
			builder.put(grammarAccess.getTestSuiteAccess().getGroup(), "rule__TestSuite__Group__0");
			builder.put(grammarAccess.getTestSuiteAccess().getGroup_3_0(), "rule__TestSuite__Group_3_0__0");
			builder.put(grammarAccess.getTestSuiteAccess().getGroup_3_1(), "rule__TestSuite__Group_3_1__0");
			builder.put(grammarAccess.getTestSuiteAccess().getGroup_3_2(), "rule__TestSuite__Group_3_2__0");
			builder.put(grammarAccess.getTestSuiteAccess().getGroup_3_3(), "rule__TestSuite__Group_3_3__0");
			builder.put(grammarAccess.getTestCaseAccess().getGroup(), "rule__TestCase__Group__0");
			builder.put(grammarAccess.getTestCaseAccess().getGroup_3_0(), "rule__TestCase__Group_3_0__0");
			builder.put(grammarAccess.getTestCaseAccess().getGroup_3_1(), "rule__TestCase__Group_3_1__0");
			builder.put(grammarAccess.getTestCaseAccess().getGroup_3_2(), "rule__TestCase__Group_3_2__0");
			builder.put(grammarAccess.getTestCaseAccess().getGroup_3_3(), "rule__TestCase__Group_3_3__0");
			builder.put(grammarAccess.getTestCaseAccess().getGroup_3_4(), "rule__TestCase__Group_3_4__0");
			builder.put(grammarAccess.getTestCaseAccess().getGroup_3_5(), "rule__TestCase__Group_3_5__0");
			builder.put(grammarAccess.getTestCaseAccess().getGroup_3_6(), "rule__TestCase__Group_3_6__0");
			builder.put(grammarAccess.getTestCaseAccess().getGroup_3_7(), "rule__TestCase__Group_3_7__0");
			builder.put(grammarAccess.getTestCaseAccess().getGroup_3_7_2(), "rule__TestCase__Group_3_7_2__0");
			builder.put(grammarAccess.getTestCaseAccess().getGroup_3_8(), "rule__TestCase__Group_3_8__0");
			builder.put(grammarAccess.getTestCaseAccess().getGroup_3_9(), "rule__TestCase__Group_3_9__0");
			builder.put(grammarAccess.getTestExecutionAccess().getGroup(), "rule__TestExecution__Group__0");
			builder.put(grammarAccess.getTestExecutionAccess().getGroup_2_0(), "rule__TestExecution__Group_2_0__0");
			builder.put(grammarAccess.getTestExecutionAccess().getGroup_2_1(), "rule__TestExecution__Group_2_1__0");
			builder.put(grammarAccess.getTestExecutionAccess().getGroup_2_2(), "rule__TestExecution__Group_2_2__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getPackagesAssignment_1(), "rule__Model__PackagesAssignment_1");
			builder.put(grammarAccess.getPackageAccess().getNameAssignment_1(), "rule__Package__NameAssignment_1");
			builder.put(grammarAccess.getPackageAccess().getDescriptionAssignment_2_0_1(), "rule__Package__DescriptionAssignment_2_0_1");
			builder.put(grammarAccess.getPackageAccess().getPackagableElementsAssignment_2_1(), "rule__Package__PackagableElementsAssignment_2_1");
			builder.put(grammarAccess.getTestableEntityAccess().getNameAssignment_2(), "rule__TestableEntity__NameAssignment_2");
			builder.put(grammarAccess.getTestableEntityAccess().getDescriptionAssignment_3_0_1(), "rule__TestableEntity__DescriptionAssignment_3_0_1");
			builder.put(grammarAccess.getTestableEntityAccess().getVersionAssignment_3_1_1(), "rule__TestableEntity__VersionAssignment_3_1_1");
			builder.put(grammarAccess.getTestRequirementAccess().getNameAssignment_2(), "rule__TestRequirement__NameAssignment_2");
			builder.put(grammarAccess.getTestRequirementAccess().getDescriptionAssignment_3_0_1(), "rule__TestRequirement__DescriptionAssignment_3_0_1");
			builder.put(grammarAccess.getTestRequirementAccess().getVersionAssignment_3_1_1(), "rule__TestRequirement__VersionAssignment_3_1_1");
			builder.put(grammarAccess.getTestRequirementAccess().getTestableEntityAssignment_3_2_1(), "rule__TestRequirement__TestableEntityAssignment_3_2_1");
			builder.put(grammarAccess.getTestSuiteAccess().getNameAssignment_2(), "rule__TestSuite__NameAssignment_2");
			builder.put(grammarAccess.getTestSuiteAccess().getDescriptionAssignment_3_0_1(), "rule__TestSuite__DescriptionAssignment_3_0_1");
			builder.put(grammarAccess.getTestSuiteAccess().getDateAssignment_3_1_1(), "rule__TestSuite__DateAssignment_3_1_1");
			builder.put(grammarAccess.getTestSuiteAccess().getVersionAssignment_3_2_1(), "rule__TestSuite__VersionAssignment_3_2_1");
			builder.put(grammarAccess.getTestSuiteAccess().getTestSpecificationsAssignment_3_3_1(), "rule__TestSuite__TestSpecificationsAssignment_3_3_1");
			builder.put(grammarAccess.getTestCaseAccess().getNameAssignment_2(), "rule__TestCase__NameAssignment_2");
			builder.put(grammarAccess.getTestCaseAccess().getDescriptionAssignment_3_0_1(), "rule__TestCase__DescriptionAssignment_3_0_1");
			builder.put(grammarAccess.getTestCaseAccess().getDateAssignment_3_1_1(), "rule__TestCase__DateAssignment_3_1_1");
			builder.put(grammarAccess.getTestCaseAccess().getVersionAssignment_3_2_1(), "rule__TestCase__VersionAssignment_3_2_1");
			builder.put(grammarAccess.getTestCaseAccess().getPreconditionAssignment_3_3_1(), "rule__TestCase__PreconditionAssignment_3_3_1");
			builder.put(grammarAccess.getTestCaseAccess().getTestingMethodAssignment_3_4_1(), "rule__TestCase__TestingMethodAssignment_3_4_1");
			builder.put(grammarAccess.getTestCaseAccess().getExpectedResultAssignment_3_5_1(), "rule__TestCase__ExpectedResultAssignment_3_5_1");
			builder.put(grammarAccess.getTestCaseAccess().getPostconditionAssignment_3_6_1(), "rule__TestCase__PostconditionAssignment_3_6_1");
			builder.put(grammarAccess.getTestCaseAccess().getInputsAssignment_3_7_1(), "rule__TestCase__InputsAssignment_3_7_1");
			builder.put(grammarAccess.getTestCaseAccess().getInputsAssignment_3_7_2_1(), "rule__TestCase__InputsAssignment_3_7_2_1");
			builder.put(grammarAccess.getTestCaseAccess().getTestsAssignment_3_8_1(), "rule__TestCase__TestsAssignment_3_8_1");
			builder.put(grammarAccess.getTestCaseAccess().getDemonstratesSatisfactionOfAssignment_3_9_1(), "rule__TestCase__DemonstratesSatisfactionOfAssignment_3_9_1");
			builder.put(grammarAccess.getTestExecutionAccess().getNameAssignment_1(), "rule__TestExecution__NameAssignment_1");
			builder.put(grammarAccess.getTestExecutionAccess().getDescriptionAssignment_2_0_1(), "rule__TestExecution__DescriptionAssignment_2_0_1");
			builder.put(grammarAccess.getTestExecutionAccess().getDateAssignment_2_1_1(), "rule__TestExecution__DateAssignment_2_1_1");
			builder.put(grammarAccess.getTestExecutionAccess().getTestSpecificationsAssignment_2_2_1(), "rule__TestExecution__TestSpecificationsAssignment_2_2_1");
			builder.put(grammarAccess.getPackageAccess().getUnorderedGroup_2(), "rule__Package__UnorderedGroup_2");
			builder.put(grammarAccess.getTestableEntityAccess().getUnorderedGroup_3(), "rule__TestableEntity__UnorderedGroup_3");
			builder.put(grammarAccess.getTestRequirementAccess().getUnorderedGroup_3(), "rule__TestRequirement__UnorderedGroup_3");
			builder.put(grammarAccess.getTestSuiteAccess().getUnorderedGroup_3(), "rule__TestSuite__UnorderedGroup_3");
			builder.put(grammarAccess.getTestCaseAccess().getUnorderedGroup_3(), "rule__TestCase__UnorderedGroup_3");
			builder.put(grammarAccess.getTestExecutionAccess().getUnorderedGroup_2(), "rule__TestExecution__UnorderedGroup_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private LTLGrammarAccess grammarAccess;

	@Override
	protected InternalLTLParser createParser() {
		InternalLTLParser result = new InternalLTLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LTLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LTLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
