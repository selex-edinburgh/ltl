/*
 * generated by Xtext 2.31.0
 */
package org.leonardo.ltl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.leonardo.ltl.ide.contentassist.antlr.internal.InternalLTLParser;
import org.leonardo.ltl.services.LTLGrammarAccess;

public class LTLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(LTLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, LTLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getPackageAccess().getAlternatives_3(), "rule__Package__Alternatives_3");
			builder.put(grammarAccess.getTestingActivityAccess().getAlternatives(), "rule__TestingActivity__Alternatives");
			builder.put(grammarAccess.getTestSpecificationAccess().getAlternatives(), "rule__TestSpecification__Alternatives");
			builder.put(grammarAccess.getExpectedResultsAccess().getAlternatives(), "rule__ExpectedResults__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getTestingAccess().getGroup(), "rule__Testing__Group__0");
			builder.put(grammarAccess.getTestingDesignAccess().getGroup(), "rule__TestingDesign__Group__0");
			builder.put(grammarAccess.getTestingRealisationAccess().getGroup(), "rule__TestingRealisation__Group__0");
			builder.put(grammarAccess.getTestingAnalysisAccess().getGroup(), "rule__TestingAnalysis__Group__0");
			builder.put(grammarAccess.getTestableEntityAccess().getGroup(), "rule__TestableEntity__Group__0");
			builder.put(grammarAccess.getTestRequirementAccess().getGroup(), "rule__TestRequirement__Group__0");
			builder.put(grammarAccess.getTestSuiteAccess().getGroup(), "rule__TestSuite__Group__0");
			builder.put(grammarAccess.getTestCaseAccess().getGroup(), "rule__TestCase__Group__0");
			builder.put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
			builder.put(grammarAccess.getExpectedResultsAccess().getGroup_0(), "rule__ExpectedResults__Group_0__0");
			builder.put(grammarAccess.getTestingMethodAccess().getGroup(), "rule__TestingMethod__Group__0");
			builder.put(grammarAccess.getModelAccess().getPackageAssignment_1(), "rule__Model__PackageAssignment_1");
			builder.put(grammarAccess.getPackageAccess().getNameAssignment_1(), "rule__Package__NameAssignment_1");
			builder.put(grammarAccess.getPackageAccess().getDescriptionAssignment_2(), "rule__Package__DescriptionAssignment_2");
			builder.put(grammarAccess.getPackageAccess().getTestingsAssignment_3_0(), "rule__Package__TestingsAssignment_3_0");
			builder.put(grammarAccess.getPackageAccess().getTestableEntitiesAssignment_3_1(), "rule__Package__TestableEntitiesAssignment_3_1");
			builder.put(grammarAccess.getPackageAccess().getTestRequirementsAssignment_3_2(), "rule__Package__TestRequirementsAssignment_3_2");
			builder.put(grammarAccess.getPackageAccess().getTestSpecificationsAssignment_3_3(), "rule__Package__TestSpecificationsAssignment_3_3");
			builder.put(grammarAccess.getPackageAccess().getTestingMethodsAssignment_3_4(), "rule__Package__TestingMethodsAssignment_3_4");
			builder.put(grammarAccess.getTestingAccess().getNameAssignment_1(), "rule__Testing__NameAssignment_1");
			builder.put(grammarAccess.getTestingAccess().getDescriptionAssignment_2(), "rule__Testing__DescriptionAssignment_2");
			builder.put(grammarAccess.getTestingAccess().getActivitiesAssignment_3(), "rule__Testing__ActivitiesAssignment_3");
			builder.put(grammarAccess.getTestingAccess().getRequirementsAssignment_4(), "rule__Testing__RequirementsAssignment_4");
			builder.put(grammarAccess.getTestingAccess().getEntitiesAssignment_5(), "rule__Testing__EntitiesAssignment_5");
			builder.put(grammarAccess.getTestingDesignAccess().getNameAssignment_1(), "rule__TestingDesign__NameAssignment_1");
			builder.put(grammarAccess.getTestingDesignAccess().getDescriptionAssignment_2(), "rule__TestingDesign__DescriptionAssignment_2");
			builder.put(grammarAccess.getTestingDesignAccess().getMethodAssignment_3(), "rule__TestingDesign__MethodAssignment_3");
			builder.put(grammarAccess.getTestingRealisationAccess().getNameAssignment_1(), "rule__TestingRealisation__NameAssignment_1");
			builder.put(grammarAccess.getTestingRealisationAccess().getDescriptionAssignment_2(), "rule__TestingRealisation__DescriptionAssignment_2");
			builder.put(grammarAccess.getTestingRealisationAccess().getMethodAssignment_3(), "rule__TestingRealisation__MethodAssignment_3");
			builder.put(grammarAccess.getTestingAnalysisAccess().getNameAssignment_1(), "rule__TestingAnalysis__NameAssignment_1");
			builder.put(grammarAccess.getTestingAnalysisAccess().getDescriptionAssignment_2(), "rule__TestingAnalysis__DescriptionAssignment_2");
			builder.put(grammarAccess.getTestingAnalysisAccess().getMethodAssignment_3(), "rule__TestingAnalysis__MethodAssignment_3");
			builder.put(grammarAccess.getTestableEntityAccess().getNameAssignment_1(), "rule__TestableEntity__NameAssignment_1");
			builder.put(grammarAccess.getTestableEntityAccess().getDescriptionAssignment_2(), "rule__TestableEntity__DescriptionAssignment_2");
			builder.put(grammarAccess.getTestRequirementAccess().getNameAssignment_1(), "rule__TestRequirement__NameAssignment_1");
			builder.put(grammarAccess.getTestRequirementAccess().getDescriptionAssignment_2(), "rule__TestRequirement__DescriptionAssignment_2");
			builder.put(grammarAccess.getTestSuiteAccess().getNameAssignment_1(), "rule__TestSuite__NameAssignment_1");
			builder.put(grammarAccess.getTestSuiteAccess().getDescriptionAssignment_2(), "rule__TestSuite__DescriptionAssignment_2");
			builder.put(grammarAccess.getTestSuiteAccess().getTestCasesAssignment_3(), "rule__TestSuite__TestCasesAssignment_3");
			builder.put(grammarAccess.getTestCaseAccess().getNameAssignment_1(), "rule__TestCase__NameAssignment_1");
			builder.put(grammarAccess.getTestCaseAccess().getDescriptionAssignment_2(), "rule__TestCase__DescriptionAssignment_2");
			builder.put(grammarAccess.getTestCaseAccess().getPreconditionAssignment_4(), "rule__TestCase__PreconditionAssignment_4");
			builder.put(grammarAccess.getTestCaseAccess().getPostconditionAssignment_6(), "rule__TestCase__PostconditionAssignment_6");
			builder.put(grammarAccess.getTestCaseAccess().getInputsAssignment_7(), "rule__TestCase__InputsAssignment_7");
			builder.put(grammarAccess.getTestCaseAccess().getExpectedResultsAssignment_8(), "rule__TestCase__ExpectedResultsAssignment_8");
			builder.put(grammarAccess.getInputAccess().getInputsAssignment_1(), "rule__Input__InputsAssignment_1");
			builder.put(grammarAccess.getExpectedResultsAccess().getExpectsAssignment_0_1(), "rule__ExpectedResults__ExpectsAssignment_0_1");
			builder.put(grammarAccess.getTestingMethodAccess().getNameAssignment_1(), "rule__TestingMethod__NameAssignment_1");
			builder.put(grammarAccess.getTestingMethodAccess().getDescriptionAssignment_2(), "rule__TestingMethod__DescriptionAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private LTLGrammarAccess grammarAccess;

	@Override
	protected InternalLTLParser createParser() {
		InternalLTLParser result = new InternalLTLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LTLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LTLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
