/*
 * generated by Xtext 2.31.0
 */
grammar InternalLTL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.leonardo.ltl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.leonardo.ltl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.leonardo.ltl.services.LTLGrammarAccess;

}
@parser::members {
	private LTLGrammarAccess grammarAccess;

	public void setGrammarAccess(LTLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePackage
entryRulePackage
:
{ before(grammarAccess.getPackageRule()); }
	 rulePackage
{ after(grammarAccess.getPackageRule()); } 
	 EOF 
;

// Rule Package
rulePackage 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPackageAccess().getGroup()); }
		(rule__Package__Group__0)
		{ after(grammarAccess.getPackageAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule QualifiedName
ruleQualifiedName 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
		(rule__QualifiedName__Group__0)
		{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleTesting
entryRuleTesting
:
{ before(grammarAccess.getTestingRule()); }
	 ruleTesting
{ after(grammarAccess.getTestingRule()); } 
	 EOF 
;

// Rule Testing
ruleTesting 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestingAccess().getGroup()); }
		(rule__Testing__Group__0)
		{ after(grammarAccess.getTestingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTestingActivity
entryRuleTestingActivity
:
{ before(grammarAccess.getTestingActivityRule()); }
	 ruleTestingActivity
{ after(grammarAccess.getTestingActivityRule()); } 
	 EOF 
;

// Rule TestingActivity
ruleTestingActivity 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestingActivityAccess().getAlternatives()); }
		(rule__TestingActivity__Alternatives)
		{ after(grammarAccess.getTestingActivityAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTestingDesign
entryRuleTestingDesign
:
{ before(grammarAccess.getTestingDesignRule()); }
	 ruleTestingDesign
{ after(grammarAccess.getTestingDesignRule()); } 
	 EOF 
;

// Rule TestingDesign
ruleTestingDesign 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestingDesignAccess().getGroup()); }
		(rule__TestingDesign__Group__0)
		{ after(grammarAccess.getTestingDesignAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTestingRealisation
entryRuleTestingRealisation
:
{ before(grammarAccess.getTestingRealisationRule()); }
	 ruleTestingRealisation
{ after(grammarAccess.getTestingRealisationRule()); } 
	 EOF 
;

// Rule TestingRealisation
ruleTestingRealisation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestingRealisationAccess().getGroup()); }
		(rule__TestingRealisation__Group__0)
		{ after(grammarAccess.getTestingRealisationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTestingAnalysis
entryRuleTestingAnalysis
:
{ before(grammarAccess.getTestingAnalysisRule()); }
	 ruleTestingAnalysis
{ after(grammarAccess.getTestingAnalysisRule()); } 
	 EOF 
;

// Rule TestingAnalysis
ruleTestingAnalysis 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestingAnalysisAccess().getGroup()); }
		(rule__TestingAnalysis__Group__0)
		{ after(grammarAccess.getTestingAnalysisAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTestableEntity
entryRuleTestableEntity
:
{ before(grammarAccess.getTestableEntityRule()); }
	 ruleTestableEntity
{ after(grammarAccess.getTestableEntityRule()); } 
	 EOF 
;

// Rule TestableEntity
ruleTestableEntity 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestableEntityAccess().getGroup()); }
		(rule__TestableEntity__Group__0)
		{ after(grammarAccess.getTestableEntityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTestRequirement
entryRuleTestRequirement
:
{ before(grammarAccess.getTestRequirementRule()); }
	 ruleTestRequirement
{ after(grammarAccess.getTestRequirementRule()); } 
	 EOF 
;

// Rule TestRequirement
ruleTestRequirement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestRequirementAccess().getGroup()); }
		(rule__TestRequirement__Group__0)
		{ after(grammarAccess.getTestRequirementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTestSpecification
entryRuleTestSpecification
:
{ before(grammarAccess.getTestSpecificationRule()); }
	 ruleTestSpecification
{ after(grammarAccess.getTestSpecificationRule()); } 
	 EOF 
;

// Rule TestSpecification
ruleTestSpecification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestSpecificationAccess().getAlternatives()); }
		(rule__TestSpecification__Alternatives)
		{ after(grammarAccess.getTestSpecificationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTestSuite
entryRuleTestSuite
:
{ before(grammarAccess.getTestSuiteRule()); }
	 ruleTestSuite
{ after(grammarAccess.getTestSuiteRule()); } 
	 EOF 
;

// Rule TestSuite
ruleTestSuite 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestSuiteAccess().getGroup()); }
		(rule__TestSuite__Group__0)
		{ after(grammarAccess.getTestSuiteAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTestCase
entryRuleTestCase
:
{ before(grammarAccess.getTestCaseRule()); }
	 ruleTestCase
{ after(grammarAccess.getTestCaseRule()); } 
	 EOF 
;

// Rule TestCase
ruleTestCase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestCaseAccess().getGroup()); }
		(rule__TestCase__Group__0)
		{ after(grammarAccess.getTestCaseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInput
entryRuleInput
:
{ before(grammarAccess.getInputRule()); }
	 ruleInput
{ after(grammarAccess.getInputRule()); } 
	 EOF 
;

// Rule Input
ruleInput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInputAccess().getGroup()); }
		(rule__Input__Group__0)
		{ after(grammarAccess.getInputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpectedResults
entryRuleExpectedResults
:
{ before(grammarAccess.getExpectedResultsRule()); }
	 ruleExpectedResults
{ after(grammarAccess.getExpectedResultsRule()); } 
	 EOF 
;

// Rule ExpectedResults
ruleExpectedResults 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpectedResultsAccess().getAlternatives()); }
		(rule__ExpectedResults__Alternatives)
		{ after(grammarAccess.getExpectedResultsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTestingMethod
entryRuleTestingMethod
:
{ before(grammarAccess.getTestingMethodRule()); }
	 ruleTestingMethod
{ after(grammarAccess.getTestingMethodRule()); } 
	 EOF 
;

// Rule TestingMethod
ruleTestingMethod 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestingMethodAccess().getGroup()); }
		(rule__TestingMethod__Group__0)
		{ after(grammarAccess.getTestingMethodAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPackageAccess().getTestingsAssignment_3_0()); }
		(rule__Package__TestingsAssignment_3_0)
		{ after(grammarAccess.getPackageAccess().getTestingsAssignment_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getPackageAccess().getTestableEntitiesAssignment_3_1()); }
		(rule__Package__TestableEntitiesAssignment_3_1)
		{ after(grammarAccess.getPackageAccess().getTestableEntitiesAssignment_3_1()); }
	)
	|
	(
		{ before(grammarAccess.getPackageAccess().getTestRequirementsAssignment_3_2()); }
		(rule__Package__TestRequirementsAssignment_3_2)
		{ after(grammarAccess.getPackageAccess().getTestRequirementsAssignment_3_2()); }
	)
	|
	(
		{ before(grammarAccess.getPackageAccess().getTestSpecificationsAssignment_3_3()); }
		(rule__Package__TestSpecificationsAssignment_3_3)
		{ after(grammarAccess.getPackageAccess().getTestSpecificationsAssignment_3_3()); }
	)
	|
	(
		{ before(grammarAccess.getPackageAccess().getTestingMethodsAssignment_3_4()); }
		(rule__Package__TestingMethodsAssignment_3_4)
		{ after(grammarAccess.getPackageAccess().getTestingMethodsAssignment_3_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingActivity__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestingActivityAccess().getTestingDesignParserRuleCall_0()); }
		ruleTestingDesign
		{ after(grammarAccess.getTestingActivityAccess().getTestingDesignParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTestingActivityAccess().getTestingRealisationParserRuleCall_1()); }
		ruleTestingRealisation
		{ after(grammarAccess.getTestingActivityAccess().getTestingRealisationParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTestingActivityAccess().getTestingAnalysisParserRuleCall_2()); }
		ruleTestingAnalysis
		{ after(grammarAccess.getTestingActivityAccess().getTestingAnalysisParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSpecification__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestSpecificationAccess().getTestSuiteParserRuleCall_0()); }
		ruleTestSuite
		{ after(grammarAccess.getTestSpecificationAccess().getTestSuiteParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTestSpecificationAccess().getTestCaseParserRuleCall_1()); }
		ruleTestCase
		{ after(grammarAccess.getTestSpecificationAccess().getTestCaseParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpectedResults__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpectedResultsAccess().getGroup_0()); }
		(rule__ExpectedResults__Group_0__0)
		{ after(grammarAccess.getExpectedResultsAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpectedResultsAccess().getINTTerminalRuleCall_1()); }
		RULE_INT
		{ after(grammarAccess.getExpectedResultsAccess().getINTTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getModelAction_0()); }
	()
	{ after(grammarAccess.getModelAccess().getModelAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getPackageAssignment_1()); }
	(rule__Model__PackageAssignment_1)*
	{ after(grammarAccess.getModelAccess().getPackageAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Package__Group__0__Impl
	rule__Package__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageAccess().getPackageKeyword_0()); }
	'package'
	{ after(grammarAccess.getPackageAccess().getPackageKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Package__Group__1__Impl
	rule__Package__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageAccess().getNameAssignment_1()); }
	(rule__Package__NameAssignment_1)
	{ after(grammarAccess.getPackageAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Package__Group__2__Impl
	rule__Package__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageAccess().getDescriptionAssignment_2()); }
	(rule__Package__DescriptionAssignment_2)?
	{ after(grammarAccess.getPackageAccess().getDescriptionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Package__Group__3__Impl
	rule__Package__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageAccess().getAlternatives_3()); }
	(rule__Package__Alternatives_3)*
	{ after(grammarAccess.getPackageAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Package__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageAccess().getEndKeyword_4()); }
	'end'
	{ after(grammarAccess.getPackageAccess().getEndKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
	(rule__QualifiedName__Group_1__0)*
	{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Testing__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Testing__Group__0__Impl
	rule__Testing__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Testing__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingAccess().getTestingKeyword_0()); }
	'testing'
	{ after(grammarAccess.getTestingAccess().getTestingKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Testing__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Testing__Group__1__Impl
	rule__Testing__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Testing__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingAccess().getNameAssignment_1()); }
	(rule__Testing__NameAssignment_1)
	{ after(grammarAccess.getTestingAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Testing__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Testing__Group__2__Impl
	rule__Testing__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Testing__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingAccess().getDescriptionAssignment_2()); }
	(rule__Testing__DescriptionAssignment_2)?
	{ after(grammarAccess.getTestingAccess().getDescriptionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Testing__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Testing__Group__3__Impl
	rule__Testing__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Testing__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingAccess().getActivitiesAssignment_3()); }
	(rule__Testing__ActivitiesAssignment_3)*
	{ after(grammarAccess.getTestingAccess().getActivitiesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Testing__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Testing__Group__4__Impl
	rule__Testing__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Testing__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingAccess().getRequirementsAssignment_4()); }
	(rule__Testing__RequirementsAssignment_4)*
	{ after(grammarAccess.getTestingAccess().getRequirementsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Testing__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Testing__Group__5__Impl
	rule__Testing__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Testing__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingAccess().getEntitiesAssignment_5()); }
	(rule__Testing__EntitiesAssignment_5)*
	{ after(grammarAccess.getTestingAccess().getEntitiesAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Testing__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Testing__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Testing__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingAccess().getEndKeyword_6()); }
	'end'
	{ after(grammarAccess.getTestingAccess().getEndKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TestingDesign__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestingDesign__Group__0__Impl
	rule__TestingDesign__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingDesign__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingDesignAccess().getDesignKeyword_0()); }
	'design'
	{ after(grammarAccess.getTestingDesignAccess().getDesignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingDesign__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestingDesign__Group__1__Impl
	rule__TestingDesign__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingDesign__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingDesignAccess().getNameAssignment_1()); }
	(rule__TestingDesign__NameAssignment_1)
	{ after(grammarAccess.getTestingDesignAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingDesign__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestingDesign__Group__2__Impl
	rule__TestingDesign__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingDesign__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingDesignAccess().getDescriptionAssignment_2()); }
	(rule__TestingDesign__DescriptionAssignment_2)?
	{ after(grammarAccess.getTestingDesignAccess().getDescriptionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingDesign__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestingDesign__Group__3__Impl
	rule__TestingDesign__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingDesign__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingDesignAccess().getMethodAssignment_3()); }
	(rule__TestingDesign__MethodAssignment_3)*
	{ after(grammarAccess.getTestingDesignAccess().getMethodAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingDesign__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestingDesign__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingDesign__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingDesignAccess().getEndKeyword_4()); }
	'end'
	{ after(grammarAccess.getTestingDesignAccess().getEndKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TestingRealisation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestingRealisation__Group__0__Impl
	rule__TestingRealisation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingRealisation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingRealisationAccess().getRealisationKeyword_0()); }
	'realisation'
	{ after(grammarAccess.getTestingRealisationAccess().getRealisationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingRealisation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestingRealisation__Group__1__Impl
	rule__TestingRealisation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingRealisation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingRealisationAccess().getNameAssignment_1()); }
	(rule__TestingRealisation__NameAssignment_1)
	{ after(grammarAccess.getTestingRealisationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingRealisation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestingRealisation__Group__2__Impl
	rule__TestingRealisation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingRealisation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingRealisationAccess().getDescriptionAssignment_2()); }
	(rule__TestingRealisation__DescriptionAssignment_2)?
	{ after(grammarAccess.getTestingRealisationAccess().getDescriptionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingRealisation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestingRealisation__Group__3__Impl
	rule__TestingRealisation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingRealisation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingRealisationAccess().getMethodAssignment_3()); }
	(rule__TestingRealisation__MethodAssignment_3)*
	{ after(grammarAccess.getTestingRealisationAccess().getMethodAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingRealisation__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestingRealisation__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingRealisation__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingRealisationAccess().getEndKeyword_4()); }
	'end'
	{ after(grammarAccess.getTestingRealisationAccess().getEndKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TestingAnalysis__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestingAnalysis__Group__0__Impl
	rule__TestingAnalysis__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingAnalysis__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingAnalysisAccess().getAnalysisKeyword_0()); }
	'analysis'
	{ after(grammarAccess.getTestingAnalysisAccess().getAnalysisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingAnalysis__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestingAnalysis__Group__1__Impl
	rule__TestingAnalysis__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingAnalysis__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingAnalysisAccess().getNameAssignment_1()); }
	(rule__TestingAnalysis__NameAssignment_1)
	{ after(grammarAccess.getTestingAnalysisAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingAnalysis__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestingAnalysis__Group__2__Impl
	rule__TestingAnalysis__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingAnalysis__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingAnalysisAccess().getDescriptionAssignment_2()); }
	(rule__TestingAnalysis__DescriptionAssignment_2)?
	{ after(grammarAccess.getTestingAnalysisAccess().getDescriptionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingAnalysis__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestingAnalysis__Group__3__Impl
	rule__TestingAnalysis__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingAnalysis__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingAnalysisAccess().getMethodAssignment_3()); }
	(rule__TestingAnalysis__MethodAssignment_3)*
	{ after(grammarAccess.getTestingAnalysisAccess().getMethodAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingAnalysis__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestingAnalysis__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingAnalysis__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingAnalysisAccess().getEndKeyword_4()); }
	'end'
	{ after(grammarAccess.getTestingAnalysisAccess().getEndKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TestableEntity__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestableEntity__Group__0__Impl
	rule__TestableEntity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestableEntity__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestableEntityAccess().getEntityKeyword_0()); }
	'entity'
	{ after(grammarAccess.getTestableEntityAccess().getEntityKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestableEntity__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestableEntity__Group__1__Impl
	rule__TestableEntity__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TestableEntity__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestableEntityAccess().getNameAssignment_1()); }
	(rule__TestableEntity__NameAssignment_1)
	{ after(grammarAccess.getTestableEntityAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestableEntity__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestableEntity__Group__2__Impl
	rule__TestableEntity__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TestableEntity__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestableEntityAccess().getDescriptionAssignment_2()); }
	(rule__TestableEntity__DescriptionAssignment_2)?
	{ after(grammarAccess.getTestableEntityAccess().getDescriptionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestableEntity__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestableEntity__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestableEntity__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestableEntityAccess().getEndKeyword_3()); }
	'end'
	{ after(grammarAccess.getTestableEntityAccess().getEndKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TestRequirement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestRequirement__Group__0__Impl
	rule__TestRequirement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestRequirement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestRequirementAccess().getRequirementKeyword_0()); }
	'requirement'
	{ after(grammarAccess.getTestRequirementAccess().getRequirementKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestRequirement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestRequirement__Group__1__Impl
	rule__TestRequirement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TestRequirement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestRequirementAccess().getNameAssignment_1()); }
	(rule__TestRequirement__NameAssignment_1)
	{ after(grammarAccess.getTestRequirementAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestRequirement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestRequirement__Group__2__Impl
	rule__TestRequirement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TestRequirement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestRequirementAccess().getDescriptionAssignment_2()); }
	(rule__TestRequirement__DescriptionAssignment_2)?
	{ after(grammarAccess.getTestRequirementAccess().getDescriptionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestRequirement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestRequirement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestRequirement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestRequirementAccess().getEndKeyword_3()); }
	'end'
	{ after(grammarAccess.getTestRequirementAccess().getEndKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TestSuite__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestSuite__Group__0__Impl
	rule__TestSuite__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestSuiteAccess().getSuiteKeyword_0()); }
	'suite'
	{ after(grammarAccess.getTestSuiteAccess().getSuiteKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestSuite__Group__1__Impl
	rule__TestSuite__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestSuiteAccess().getNameAssignment_1()); }
	(rule__TestSuite__NameAssignment_1)
	{ after(grammarAccess.getTestSuiteAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestSuite__Group__2__Impl
	rule__TestSuite__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestSuiteAccess().getDescriptionAssignment_2()); }
	(rule__TestSuite__DescriptionAssignment_2)?
	{ after(grammarAccess.getTestSuiteAccess().getDescriptionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestSuite__Group__3__Impl
	rule__TestSuite__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestSuiteAccess().getTestCasesAssignment_3()); }
	(rule__TestSuite__TestCasesAssignment_3)*
	{ after(grammarAccess.getTestSuiteAccess().getTestCasesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestSuite__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestSuiteAccess().getEndKeyword_4()); }
	'end'
	{ after(grammarAccess.getTestSuiteAccess().getEndKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TestCase__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestCase__Group__0__Impl
	rule__TestCase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestCaseAccess().getCaseKeyword_0()); }
	'case'
	{ after(grammarAccess.getTestCaseAccess().getCaseKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestCase__Group__1__Impl
	rule__TestCase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestCaseAccess().getNameAssignment_1()); }
	(rule__TestCase__NameAssignment_1)
	{ after(grammarAccess.getTestCaseAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestCase__Group__2__Impl
	rule__TestCase__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestCaseAccess().getDescriptionAssignment_2()); }
	(rule__TestCase__DescriptionAssignment_2)?
	{ after(grammarAccess.getTestCaseAccess().getDescriptionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestCase__Group__3__Impl
	rule__TestCase__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestCaseAccess().getPreKeyword_3()); }
	'pre'
	{ after(grammarAccess.getTestCaseAccess().getPreKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestCase__Group__4__Impl
	rule__TestCase__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestCaseAccess().getPreconditionAssignment_4()); }
	(rule__TestCase__PreconditionAssignment_4)?
	{ after(grammarAccess.getTestCaseAccess().getPreconditionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestCase__Group__5__Impl
	rule__TestCase__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestCaseAccess().getPostKeyword_5()); }
	'post'
	{ after(grammarAccess.getTestCaseAccess().getPostKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestCase__Group__6__Impl
	rule__TestCase__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestCaseAccess().getPostconditionAssignment_6()); }
	(rule__TestCase__PostconditionAssignment_6)?
	{ after(grammarAccess.getTestCaseAccess().getPostconditionAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestCase__Group__7__Impl
	rule__TestCase__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestCaseAccess().getInputsAssignment_7()); }
	(rule__TestCase__InputsAssignment_7)*
	{ after(grammarAccess.getTestCaseAccess().getInputsAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestCase__Group__8__Impl
	rule__TestCase__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestCaseAccess().getExpectedResultsAssignment_8()); }
	(rule__TestCase__ExpectedResultsAssignment_8)*
	{ after(grammarAccess.getTestCaseAccess().getExpectedResultsAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestCase__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestCaseAccess().getEndKeyword_9()); }
	'end'
	{ after(grammarAccess.getTestCaseAccess().getEndKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__0__Impl
	rule__Input__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getInputKeyword_0()); }
	'input'
	{ after(grammarAccess.getInputAccess().getInputKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getInputsAssignment_1()); }
	(rule__Input__InputsAssignment_1)
	{ after(grammarAccess.getInputAccess().getInputsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpectedResults__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpectedResults__Group_0__0__Impl
	rule__ExpectedResults__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpectedResults__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpectedResultsAccess().getExpectKeyword_0_0()); }
	'expect'
	{ after(grammarAccess.getExpectedResultsAccess().getExpectKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpectedResults__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpectedResults__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpectedResults__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpectedResultsAccess().getExpectsAssignment_0_1()); }
	(rule__ExpectedResults__ExpectsAssignment_0_1)
	{ after(grammarAccess.getExpectedResultsAccess().getExpectsAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TestingMethod__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestingMethod__Group__0__Impl
	rule__TestingMethod__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingMethod__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingMethodAccess().getMethodKeyword_0()); }
	'method'
	{ after(grammarAccess.getTestingMethodAccess().getMethodKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingMethod__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestingMethod__Group__1__Impl
	rule__TestingMethod__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingMethod__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingMethodAccess().getNameAssignment_1()); }
	(rule__TestingMethod__NameAssignment_1)
	{ after(grammarAccess.getTestingMethodAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingMethod__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestingMethod__Group__2__Impl
	rule__TestingMethod__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingMethod__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingMethodAccess().getDescriptionAssignment_2()); }
	(rule__TestingMethod__DescriptionAssignment_2)?
	{ after(grammarAccess.getTestingMethodAccess().getDescriptionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingMethod__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TestingMethod__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingMethod__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestingMethodAccess().getEndKeyword_3()); }
	'end'
	{ after(grammarAccess.getTestingMethodAccess().getEndKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__PackageAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getPackagePackageParserRuleCall_1_0()); }
		rulePackage
		{ after(grammarAccess.getModelAccess().getPackagePackageParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPackageAccess().getNameQualifiedNameParserRuleCall_1_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getPackageAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__DescriptionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPackageAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getPackageAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__TestingsAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPackageAccess().getTestingsTestingParserRuleCall_3_0_0()); }
		ruleTesting
		{ after(grammarAccess.getPackageAccess().getTestingsTestingParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__TestableEntitiesAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPackageAccess().getTestableEntitiesTestableEntityParserRuleCall_3_1_0()); }
		ruleTestableEntity
		{ after(grammarAccess.getPackageAccess().getTestableEntitiesTestableEntityParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__TestRequirementsAssignment_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPackageAccess().getTestRequirementsTestRequirementParserRuleCall_3_2_0()); }
		ruleTestRequirement
		{ after(grammarAccess.getPackageAccess().getTestRequirementsTestRequirementParserRuleCall_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__TestSpecificationsAssignment_3_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPackageAccess().getTestSpecificationsTestSpecificationParserRuleCall_3_3_0()); }
		ruleTestSpecification
		{ after(grammarAccess.getPackageAccess().getTestSpecificationsTestSpecificationParserRuleCall_3_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__TestingMethodsAssignment_3_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPackageAccess().getTestingMethodsTestingMethodParserRuleCall_3_4_0()); }
		ruleTestingMethod
		{ after(grammarAccess.getPackageAccess().getTestingMethodsTestingMethodParserRuleCall_3_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Testing__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestingAccess().getNameQualifiedNameParserRuleCall_1_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getTestingAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Testing__DescriptionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestingAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getTestingAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Testing__ActivitiesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestingAccess().getActivitiesTestingActivityParserRuleCall_3_0()); }
		ruleTestingActivity
		{ after(grammarAccess.getTestingAccess().getActivitiesTestingActivityParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Testing__RequirementsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestingAccess().getRequirementsTestRequirementParserRuleCall_4_0()); }
		ruleTestRequirement
		{ after(grammarAccess.getTestingAccess().getRequirementsTestRequirementParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Testing__EntitiesAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestingAccess().getEntitiesTestableEntityParserRuleCall_5_0()); }
		ruleTestableEntity
		{ after(grammarAccess.getTestingAccess().getEntitiesTestableEntityParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingDesign__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestingDesignAccess().getNameQualifiedNameParserRuleCall_1_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getTestingDesignAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingDesign__DescriptionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestingDesignAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getTestingDesignAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingDesign__MethodAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestingDesignAccess().getMethodTestingMethodParserRuleCall_3_0()); }
		ruleTestingMethod
		{ after(grammarAccess.getTestingDesignAccess().getMethodTestingMethodParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingRealisation__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestingRealisationAccess().getNameQualifiedNameParserRuleCall_1_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getTestingRealisationAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingRealisation__DescriptionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestingRealisationAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getTestingRealisationAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingRealisation__MethodAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestingRealisationAccess().getMethodTestingMethodParserRuleCall_3_0()); }
		ruleTestingMethod
		{ after(grammarAccess.getTestingRealisationAccess().getMethodTestingMethodParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingAnalysis__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestingAnalysisAccess().getNameQualifiedNameParserRuleCall_1_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getTestingAnalysisAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingAnalysis__DescriptionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestingAnalysisAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getTestingAnalysisAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingAnalysis__MethodAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestingAnalysisAccess().getMethodTestingMethodParserRuleCall_3_0()); }
		ruleTestingMethod
		{ after(grammarAccess.getTestingAnalysisAccess().getMethodTestingMethodParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestableEntity__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestableEntityAccess().getNameQualifiedNameParserRuleCall_1_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getTestableEntityAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestableEntity__DescriptionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestableEntityAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getTestableEntityAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestRequirement__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestRequirementAccess().getNameQualifiedNameParserRuleCall_1_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getTestRequirementAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestRequirement__DescriptionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestRequirementAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getTestRequirementAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestSuiteAccess().getNameQualifiedNameParserRuleCall_1_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getTestSuiteAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__DescriptionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestSuiteAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getTestSuiteAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestSuite__TestCasesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestSuiteAccess().getTestCasesTestCaseParserRuleCall_3_0()); }
		ruleTestCase
		{ after(grammarAccess.getTestSuiteAccess().getTestCasesTestCaseParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestCaseAccess().getNameQualifiedNameParserRuleCall_1_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getTestCaseAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__DescriptionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestCaseAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getTestCaseAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__PreconditionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestCaseAccess().getPreconditionSTRINGTerminalRuleCall_4_0()); }
		RULE_STRING
		{ after(grammarAccess.getTestCaseAccess().getPreconditionSTRINGTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__PostconditionAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestCaseAccess().getPostconditionSTRINGTerminalRuleCall_6_0()); }
		RULE_STRING
		{ after(grammarAccess.getTestCaseAccess().getPostconditionSTRINGTerminalRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__InputsAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestCaseAccess().getInputsInputParserRuleCall_7_0()); }
		ruleInput
		{ after(grammarAccess.getTestCaseAccess().getInputsInputParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestCase__ExpectedResultsAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestCaseAccess().getExpectedResultsExpectedResultsParserRuleCall_8_0()); }
		ruleExpectedResults
		{ after(grammarAccess.getTestCaseAccess().getExpectedResultsExpectedResultsParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__InputsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputAccess().getInputsTestableEntityCrossReference_1_0()); }
		(
			{ before(grammarAccess.getInputAccess().getInputsTestableEntityQualifiedNameParserRuleCall_1_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getInputAccess().getInputsTestableEntityQualifiedNameParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getInputAccess().getInputsTestableEntityCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpectedResults__ExpectsAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpectedResultsAccess().getExpectsSTRINGTerminalRuleCall_0_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getExpectedResultsAccess().getExpectsSTRINGTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingMethod__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestingMethodAccess().getNameQualifiedNameParserRuleCall_1_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getTestingMethodAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TestingMethod__DescriptionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestingMethodAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getTestingMethodAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
